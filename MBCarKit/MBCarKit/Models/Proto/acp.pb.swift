// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: acp.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Proto_VVA {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum CommandState: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknownCommandState // = 0
    case created // = 1010
    case enqueued // = 1016
    case processing // = 1012
    case suspended // = 1017
    case finished // = 1018
    case UNRECOGNIZED(Int)

    init() {
      self = .unknownCommandState
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownCommandState
      case 1010: self = .created
      case 1012: self = .processing
      case 1016: self = .enqueued
      case 1017: self = .suspended
      case 1018: self = .finished
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknownCommandState: return 0
      case .created: return 1010
      case .processing: return 1012
      case .enqueued: return 1016
      case .suspended: return 1017
      case .finished: return 1018
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum CommandCondition: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknwonCommandCondition // = 0
    case none // = 1000
    case accepted // = 1001
    case rejected // = 1002
    case terminate // = 1003
    case success // = 1011
    case failed // = 1013
    case overwritten // = 1014
    case timeout // = 1015
    case UNRECOGNIZED(Int)

    init() {
      self = .unknwonCommandCondition
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknwonCommandCondition
      case 1000: self = .none
      case 1001: self = .accepted
      case 1002: self = .rejected
      case 1003: self = .terminate
      case 1011: self = .success
      case 1013: self = .failed
      case 1014: self = .overwritten
      case 1015: self = .timeout
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknwonCommandCondition: return 0
      case .none: return 1000
      case .accepted: return 1001
      case .rejected: return 1002
      case .terminate: return 1003
      case .success: return 1011
      case .failed: return 1013
      case .overwritten: return 1014
      case .timeout: return 1015
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Proto_VVA.CommandState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VVA.CommandState] = [
    .unknownCommandState,
    .created,
    .enqueued,
    .processing,
    .suspended,
    .finished,
  ]
}

extension Proto_VVA.CommandCondition: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VVA.CommandCondition] = [
    .unknwonCommandCondition,
    .none,
    .accepted,
    .rejected,
    .terminate,
    .success,
    .failed,
    .overwritten,
    .timeout,
  ]
}

#endif  // swift(>=4.2)

struct Proto_VehicleAPI {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum CommandState: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknownCommandState // = 0

    /// Command execution request is accepted and an asynchronous process is
    /// being initialized.
    case initiation // = 1

    /// Another process for the same vehicle and queue is active, the request has
    /// been queued for later execution.
    case enqueued // = 2

    /// The process is currently being processed by the backend.
    case processing // = 3

    /// The backend currently waits for the vehicle to respond to the request.
    case waiting // = 4

    /// The process has finished successfully.
    case finished // = 5

    /// There was an error while executing the command process.
    case failed // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .unknownCommandState
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownCommandState
      case 1: self = .initiation
      case 2: self = .enqueued
      case 3: self = .processing
      case 4: self = .waiting
      case 5: self = .finished
      case 6: self = .failed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknownCommandState: return 0
      case .initiation: return 1
      case .enqueued: return 2
      case .processing: return 3
      case .waiting: return 4
      case .finished: return 5
      case .failed: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum AttributeStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Value is set and valid
    case valueSet // = 0

    /// Value has not yet been retrieved from vehicle (but sensor etc. should be available)
    case valueNotSet // = 1

    /// Value has been retrieved from vehicle but is invalid (marked as invalid by DaiVB backend)
    case invalid // = 3

    /// Vehicle does not support this attribute (e.g. does not have the sensor etc.)
    case notAvailable // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .valueSet
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .valueSet
      case 1: self = .valueNotSet
      case 3: self = .invalid
      case 4: self = .notAvailable
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .valueSet: return 0
      case .valueNotSet: return 1
      case .invalid: return 3
      case .notAvailable: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum QueueType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknowncommandqueuetype // = 0
    case doors // = 10
    case auxheat // = 11
    case precond // = 12
    case chargeopt // = 13
    case maintenance // = 14
    case tcu // = 15
    case feed // = 16
    case serviceactivation // = 17
    case atp // = 18
    case assistance // = 19
    case racp // = 20
    case weekprofile // = 21
    case remotediagnosis // = 22

    ///(ALSO USED BY SIGPOS/RVF)
    case flsh // = 23
    case temperature // = 24
    case tripcomp // = 25
    case engine // = 26
    case theftalarm // = 27
    case window // = 28
    case headunit // = 29
    case mecall // = 31
    case immobilizer // = 32
    case rentalsignal // = 33

    ///(BLACKCHANNEL)
    case bcf // = 34
    case plugandcharge // = 35
    case carsharingmodule // = 36
    case battery // = 37
    case onboardfences // = 38
    case speedfences // = 39
    case chargingtariffs // = 40
    case rtmconfig // = 41
    case maintenancecomputer // = 42
    case mecall2 // = 43
    case automatedvaletparking // = 44
    case UNRECOGNIZED(Int)

    init() {
      self = .unknowncommandqueuetype
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknowncommandqueuetype
      case 10: self = .doors
      case 11: self = .auxheat
      case 12: self = .precond
      case 13: self = .chargeopt
      case 14: self = .maintenance
      case 15: self = .tcu
      case 16: self = .feed
      case 17: self = .serviceactivation
      case 18: self = .atp
      case 19: self = .assistance
      case 20: self = .racp
      case 21: self = .weekprofile
      case 22: self = .remotediagnosis
      case 23: self = .flsh
      case 24: self = .temperature
      case 25: self = .tripcomp
      case 26: self = .engine
      case 27: self = .theftalarm
      case 28: self = .window
      case 29: self = .headunit
      case 31: self = .mecall
      case 32: self = .immobilizer
      case 33: self = .rentalsignal
      case 34: self = .bcf
      case 35: self = .plugandcharge
      case 36: self = .carsharingmodule
      case 37: self = .battery
      case 38: self = .onboardfences
      case 39: self = .speedfences
      case 40: self = .chargingtariffs
      case 41: self = .rtmconfig
      case 42: self = .maintenancecomputer
      case 43: self = .mecall2
      case 44: self = .automatedvaletparking
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknowncommandqueuetype: return 0
      case .doors: return 10
      case .auxheat: return 11
      case .precond: return 12
      case .chargeopt: return 13
      case .maintenance: return 14
      case .tcu: return 15
      case .feed: return 16
      case .serviceactivation: return 17
      case .atp: return 18
      case .assistance: return 19
      case .racp: return 20
      case .weekprofile: return 21
      case .remotediagnosis: return 22
      case .flsh: return 23
      case .temperature: return 24
      case .tripcomp: return 25
      case .engine: return 26
      case .theftalarm: return 27
      case .window: return 28
      case .headunit: return 29
      case .mecall: return 31
      case .immobilizer: return 32
      case .rentalsignal: return 33
      case .bcf: return 34
      case .plugandcharge: return 35
      case .carsharingmodule: return 36
      case .battery: return 37
      case .onboardfences: return 38
      case .speedfences: return 39
      case .chargingtariffs: return 40
      case .rtmconfig: return 41
      case .maintenancecomputer: return 42
      case .mecall2: return 43
      case .automatedvaletparking: return 44
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Proto_VehicleAPI.CommandState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAPI.CommandState] = [
    .unknownCommandState,
    .initiation,
    .enqueued,
    .processing,
    .waiting,
    .finished,
    .failed,
  ]
}

extension Proto_VehicleAPI.AttributeStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAPI.AttributeStatus] = [
    .valueSet,
    .valueNotSet,
    .invalid,
    .notAvailable,
  ]
}

extension Proto_VehicleAPI.QueueType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAPI.QueueType] = [
    .unknowncommandqueuetype,
    .doors,
    .auxheat,
    .precond,
    .chargeopt,
    .maintenance,
    .tcu,
    .feed,
    .serviceactivation,
    .atp,
    .assistance,
    .racp,
    .weekprofile,
    .remotediagnosis,
    .flsh,
    .temperature,
    .tripcomp,
    .engine,
    .theftalarm,
    .window,
    .headunit,
    .mecall,
    .immobilizer,
    .rentalsignal,
    .bcf,
    .plugandcharge,
    .carsharingmodule,
    .battery,
    .onboardfences,
    .speedfences,
    .chargingtariffs,
    .rtmconfig,
    .maintenancecomputer,
    .mecall2,
    .automatedvaletparking,
  ]
}

#endif  // swift(>=4.2)

struct Proto_ACP {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum CommandType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknowncommandtype // = 0
    case doorslock // = 100
    case doorsunlock // = 110
    case trunkunlock // = 115
    case fuelflapunlock // = 116
    case chargeflapunlock // = 117
    case chargecouplerunlock // = 118
    case doorspreparerental // = 120
    case doorssecurevehicle // = 130
    case auxheatstart // = 300
    case auxheatstop // = 310
    case auxheatconfigure // = 320
    case temperatureconfigure // = 350
    case weekprofileconfigure // = 360
    case precondstart // = 400
    case precondstop // = 410
    case precondconfigure // = 420
    case precondconfigureseats // = 425
    case chargeoptconfigure // = 430
    case chargeoptstart // = 440
    case chargeoptstop // = 450
    case feedpoi // = 500
    case feedfreetext // = 510
    case enginestart // = 550
    case enginestop // = 560
    case engineavpstart // = 570
    case tcuwakeup // = 600
    case tcuswupdate // = 610
    case tcurcsreset // = 620
    case tcuinterrogation // = 630
    case speedalertstart // = 710
    case speedalertstop // = 720

    /// (DEPRECATED)
    case flshstart // = 750

    /// (DEPRECATED)
    case flshstop // = 760
    case sigposstart // = 770
    case contractconfigure // = 800
    case contractremove // = 810
    case rootconfigure // = 820
    case rootremove // = 830

    /// RESET TRIPCOMP
    case tripcomp // = 850
    case maintenanceconfigure // = 930
    case maintenancecomputeroffset // = 931
    case shorttestexecute // = 935
    case serviceactivationconfigure // = 940
    case dc2Serviceactivationconfigure // = 945

    ///(TEST COMMAND)
    case dc2Rawdownload // = 950

    /// (DC2+)
    case applicationconfiguration // = 955

    /// (TEST COMMAND)
    case dc2Starttracking // = 960
    case atpsequence // = 990
    case theftalarmtoggleinterior // = 1000
    case theftalarmtoggletow // = 1010
    case theftalarmselectinteriortow // = 1020
    case theftalarmdeselectinteriortow // = 1030
    case theftalarmstop // = 1040
    case windowopen // = 1100
    case windowclose // = 1110
    case windowventilate // = 1120
    case windowmove // = 1121
    case roofopen // = 1130
    case roofclose // = 1140
    case rooflift // = 1150
    case roofmove // = 1151
    case batterymaxsoc // = 2000
    case batterychargeprogram // = 2010
    case chargeprogramconfigure // = 2020
    case onboardfencescreate // = 2100
    case onboardfencesupdate // = 2110
    case onboardfencesdelete // = 2120
    case speedfencescreate // = 2200
    case speedfencesupdate // = 2210
    case speedfencesdelete // = 2220
    case chargingtariffscreate // = 2300
    case chargingtariffsupdate // = 2310
    case chargingtariffsdelete // = 2320
    case theftalarmstart // = 2500
    case theftalarmselectinterior // = 2510
    case theftalarmdeselectinterior // = 2520
    case theftalarmselecttow // = 2530
    case theftalarmdeselecttow // = 2540
    case theftalarmselectdamagedetection // = 2550
    case theftalarmdeselectdamagedetection // = 2560
    case theftalarmconfirmdamagedetection // = 2570
    case mecall2Start // = 2600
    case udxtriggersynchronization // = 1200
    case udxactiveuserprofile // = 1210
    case udxresetuserdata // = 1220
    case userprofsynch // = 1230
    case userdatareset // = 1240
    case profactivationsnap // = 1250
    case profactivationdirect // = 1255
    case softwareupdate // = 1260
    case pushnotification // = 1270
    case mecallcommand // = 1310
    case precondstartrcs // = 1400
    case precondstoprcs // = 1410
    case precondconfigurercs // = 1420
    case tcuconfigure // = 1430
    case edisonserviceactivation // = 1431
    case testsequence // = 1432
    case precondconfigureracp // = 1433
    case chargeoptconfigureracp // = 1434
    case tarifftabledownload // = 1435
    case precondstartracp // = 1436
    case precondstopracp // = 1437
    case rootcertificateremove // = 1438
    case onrequestprobeupload // = 1439
    case rootcertificatedownload // = 1440
    case contractcertificateremove // = 1441
    case contractcertificatedownload // = 1442
    case probeconfigurationupdate // = 1443
    case rdiagdeleteecu // = 1500
    case rdiagstatusreport // = 1501
    case rdiagexecution // = 1502
    case immobilizerchallenge // = 1600
    case immobilizersearchkeyline // = 1610
    case immobilizerreleasekeyline // = 1620
    case immobilizerlockkeyline // = 1630
    case setrentalsignal // = 1700
    case blackchanneldownload // = 1800
    case blackchannelupload // = 1810
    case configurecsm // = 1900
    case updatevehicleinfo // = 1901
    case relaymessagetocsm // = 1902
    case relayrentalrequesttocsb // = 1903
    case rtmdownloadconfig // = 2400
    case rtmreadconfig // = 2410
    case avpactivate // = 2700
    static let unknownCommandType = unknowncommandtype
    static let doorsLock = doorslock
    static let doorsUnlock = doorsunlock
    static let trunkUnlock = trunkunlock
    static let fuelflapUnlock = fuelflapunlock
    static let chargeflapUnlock = chargeflapunlock
    static let chargecouplerUnlock = chargecouplerunlock
    static let doorsPrepareRental = doorspreparerental
    static let doorsSecureVehicle = doorssecurevehicle
    static let auxheatStart = auxheatstart
    static let auxheatStop = auxheatstop
    static let auxheatConfigure = auxheatconfigure
    static let temperatureConfigure = temperatureconfigure
    static let weekprofileConfigure = weekprofileconfigure
    static let precondStart = precondstart
    static let precondStop = precondstop
    static let precondConfigure = precondconfigure
    static let precondConfigureSeats = precondconfigureseats
    static let chargeoptConfigure = chargeoptconfigure
    static let chargeoptStart = chargeoptstart
    static let chargeoptStop = chargeoptstop
    static let feedPoi = feedpoi
    static let feedFreetext = feedfreetext
    static let engineStart = enginestart
    static let engineStop = enginestop
    static let engineAvpstart = engineavpstart
    static let tcuWakeup = tcuwakeup
    static let tcuSwUpdate = tcuswupdate
    static let tcuRcsReset = tcurcsreset
    static let tcuInterrogation = tcuinterrogation
    static let speedalertStart = speedalertstart
    static let speedalertStop = speedalertstop

    /// (DEPRECATED)
    static let flshStart = flshstart

    /// (DEPRECATED)
    static let flshStop = flshstop
    static let sigposStart = sigposstart
    static let contractConfigure = contractconfigure
    static let contractRemove = contractremove
    static let rootConfigure = rootconfigure
    static let rootRemove = rootremove
    static let maintenanceConfigure = maintenanceconfigure
    static let maintenanceComputerOffset = maintenancecomputeroffset
    static let shorttestExecute = shorttestexecute
    static let serviceactivationConfigure = serviceactivationconfigure
    static let dc2ServiceactivationConfigure = dc2Serviceactivationconfigure

    ///(test command)
    static let dc2RawDownload = dc2Rawdownload

    /// (DC2+)
    static let applicationConfiguration = applicationconfiguration

    /// (test command)
    static let dc2StartTracking = dc2Starttracking
    static let atpSequence = atpsequence
    static let theftalarmToggleInterior = theftalarmtoggleinterior
    static let theftalarmToggleTow = theftalarmtoggletow
    static let theftalarmSelectInteriorTow = theftalarmselectinteriortow
    static let theftalarmDeselectInteriorTow = theftalarmdeselectinteriortow
    static let theftalarmStop = theftalarmstop
    static let windowOpen = windowopen
    static let windowClose = windowclose
    static let windowVentilate = windowventilate
    static let windowMove = windowmove
    static let roofOpen = roofopen
    static let roofClose = roofclose
    static let roofLift = rooflift
    static let roofMove = roofmove
    static let batteryMaxsoc = batterymaxsoc
    static let batteryChargeprogram = batterychargeprogram
    static let onboardfencesCreate = onboardfencescreate
    static let onboardfencesUpdate = onboardfencesupdate
    static let onboardfencesDelete = onboardfencesdelete
    static let speedfencesCreate = speedfencescreate
    static let speedfencesUpdate = speedfencesupdate
    static let speedfencesDelete = speedfencesdelete
    static let chargingtariffsCreate = chargingtariffscreate
    static let chargingtariffsUpdate = chargingtariffsupdate
    static let chargingtariffsDelete = chargingtariffsdelete
    static let udxTriggerSynchronization = udxtriggersynchronization
    static let udxActiveUserProfile = udxactiveuserprofile
    static let udxResetUserData = udxresetuserdata
    static let userProfSynch = userprofsynch
    static let userDataReset = userdatareset
    static let profActivationSnap = profactivationsnap
    static let profActivationDirect = profactivationdirect
    static let softwareUpdate = softwareupdate
    static let pushNotification = pushnotification
    static let precondStartRcs = precondstartrcs
    static let precondStopRcs = precondstoprcs
    static let precondConfigureRcs = precondconfigurercs
    static let tcuConfigure = tcuconfigure
    static let edisonServiceActivation = edisonserviceactivation
    static let testSequence = testsequence
    static let precondConfigureRacp = precondconfigureracp
    static let chargeoptConfigureRacp = chargeoptconfigureracp
    static let tariffTableDownload = tarifftabledownload
    static let precondStartRacp = precondstartracp
    static let precondStopRacp = precondstopracp
    static let rootCertificateRemove = rootcertificateremove
    static let onRequestProbeUpload = onrequestprobeupload
    static let rootCertificateDownload = rootcertificatedownload
    static let contractCertificateRemove = contractcertificateremove
    static let contractCertificateDownload = contractcertificatedownload
    static let probeConfigurationUpdate = probeconfigurationupdate
    static let rdiagDeleteEcu = rdiagdeleteecu
    static let rdiagStatusReport = rdiagstatusreport
    static let rdiagExecution = rdiagexecution
    static let immobilizerChallenge = immobilizerchallenge
    static let immobilizerSearchKeyline = immobilizersearchkeyline
    static let immobilizerReleaseKeyline = immobilizerreleasekeyline
    static let immobilizerLockKeyline = immobilizerlockkeyline
    static let setRentalSignal = setrentalsignal
    static let blackchannelDownload = blackchanneldownload
    static let blackchannelUpload = blackchannelupload
    static let rtmDownloadConfig = rtmdownloadconfig
    static let rtmReadConfig = rtmreadconfig
    static let avpActivate = avpactivate
    case UNRECOGNIZED(Int)

    init() {
      self = .unknowncommandtype
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknowncommandtype
      case 100: self = .doorslock
      case 110: self = .doorsunlock
      case 115: self = .trunkunlock
      case 116: self = .fuelflapunlock
      case 117: self = .chargeflapunlock
      case 118: self = .chargecouplerunlock
      case 120: self = .doorspreparerental
      case 130: self = .doorssecurevehicle
      case 300: self = .auxheatstart
      case 310: self = .auxheatstop
      case 320: self = .auxheatconfigure
      case 350: self = .temperatureconfigure
      case 360: self = .weekprofileconfigure
      case 400: self = .precondstart
      case 410: self = .precondstop
      case 420: self = .precondconfigure
      case 425: self = .precondconfigureseats
      case 430: self = .chargeoptconfigure
      case 440: self = .chargeoptstart
      case 450: self = .chargeoptstop
      case 500: self = .feedpoi
      case 510: self = .feedfreetext
      case 550: self = .enginestart
      case 560: self = .enginestop
      case 570: self = .engineavpstart
      case 600: self = .tcuwakeup
      case 610: self = .tcuswupdate
      case 620: self = .tcurcsreset
      case 630: self = .tcuinterrogation
      case 710: self = .speedalertstart
      case 720: self = .speedalertstop
      case 750: self = .flshstart
      case 760: self = .flshstop
      case 770: self = .sigposstart
      case 800: self = .contractconfigure
      case 810: self = .contractremove
      case 820: self = .rootconfigure
      case 830: self = .rootremove
      case 850: self = .tripcomp
      case 930: self = .maintenanceconfigure
      case 931: self = .maintenancecomputeroffset
      case 935: self = .shorttestexecute
      case 940: self = .serviceactivationconfigure
      case 945: self = .dc2Serviceactivationconfigure
      case 950: self = .dc2Rawdownload
      case 955: self = .applicationconfiguration
      case 960: self = .dc2Starttracking
      case 990: self = .atpsequence
      case 1000: self = .theftalarmtoggleinterior
      case 1010: self = .theftalarmtoggletow
      case 1020: self = .theftalarmselectinteriortow
      case 1030: self = .theftalarmdeselectinteriortow
      case 1040: self = .theftalarmstop
      case 1100: self = .windowopen
      case 1110: self = .windowclose
      case 1120: self = .windowventilate
      case 1121: self = .windowmove
      case 1130: self = .roofopen
      case 1140: self = .roofclose
      case 1150: self = .rooflift
      case 1151: self = .roofmove
      case 1200: self = .udxtriggersynchronization
      case 1210: self = .udxactiveuserprofile
      case 1220: self = .udxresetuserdata
      case 1230: self = .userprofsynch
      case 1240: self = .userdatareset
      case 1250: self = .profactivationsnap
      case 1255: self = .profactivationdirect
      case 1260: self = .softwareupdate
      case 1270: self = .pushnotification
      case 1310: self = .mecallcommand
      case 1400: self = .precondstartrcs
      case 1410: self = .precondstoprcs
      case 1420: self = .precondconfigurercs
      case 1430: self = .tcuconfigure
      case 1431: self = .edisonserviceactivation
      case 1432: self = .testsequence
      case 1433: self = .precondconfigureracp
      case 1434: self = .chargeoptconfigureracp
      case 1435: self = .tarifftabledownload
      case 1436: self = .precondstartracp
      case 1437: self = .precondstopracp
      case 1438: self = .rootcertificateremove
      case 1439: self = .onrequestprobeupload
      case 1440: self = .rootcertificatedownload
      case 1441: self = .contractcertificateremove
      case 1442: self = .contractcertificatedownload
      case 1443: self = .probeconfigurationupdate
      case 1500: self = .rdiagdeleteecu
      case 1501: self = .rdiagstatusreport
      case 1502: self = .rdiagexecution
      case 1600: self = .immobilizerchallenge
      case 1610: self = .immobilizersearchkeyline
      case 1620: self = .immobilizerreleasekeyline
      case 1630: self = .immobilizerlockkeyline
      case 1700: self = .setrentalsignal
      case 1800: self = .blackchanneldownload
      case 1810: self = .blackchannelupload
      case 1900: self = .configurecsm
      case 1901: self = .updatevehicleinfo
      case 1902: self = .relaymessagetocsm
      case 1903: self = .relayrentalrequesttocsb
      case 2000: self = .batterymaxsoc
      case 2010: self = .batterychargeprogram
      case 2020: self = .chargeprogramconfigure
      case 2100: self = .onboardfencescreate
      case 2110: self = .onboardfencesupdate
      case 2120: self = .onboardfencesdelete
      case 2200: self = .speedfencescreate
      case 2210: self = .speedfencesupdate
      case 2220: self = .speedfencesdelete
      case 2300: self = .chargingtariffscreate
      case 2310: self = .chargingtariffsupdate
      case 2320: self = .chargingtariffsdelete
      case 2400: self = .rtmdownloadconfig
      case 2410: self = .rtmreadconfig
      case 2500: self = .theftalarmstart
      case 2510: self = .theftalarmselectinterior
      case 2520: self = .theftalarmdeselectinterior
      case 2530: self = .theftalarmselecttow
      case 2540: self = .theftalarmdeselecttow
      case 2550: self = .theftalarmselectdamagedetection
      case 2560: self = .theftalarmdeselectdamagedetection
      case 2570: self = .theftalarmconfirmdamagedetection
      case 2600: self = .mecall2Start
      case 2700: self = .avpactivate
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknowncommandtype: return 0
      case .doorslock: return 100
      case .doorsunlock: return 110
      case .trunkunlock: return 115
      case .fuelflapunlock: return 116
      case .chargeflapunlock: return 117
      case .chargecouplerunlock: return 118
      case .doorspreparerental: return 120
      case .doorssecurevehicle: return 130
      case .auxheatstart: return 300
      case .auxheatstop: return 310
      case .auxheatconfigure: return 320
      case .temperatureconfigure: return 350
      case .weekprofileconfigure: return 360
      case .precondstart: return 400
      case .precondstop: return 410
      case .precondconfigure: return 420
      case .precondconfigureseats: return 425
      case .chargeoptconfigure: return 430
      case .chargeoptstart: return 440
      case .chargeoptstop: return 450
      case .feedpoi: return 500
      case .feedfreetext: return 510
      case .enginestart: return 550
      case .enginestop: return 560
      case .engineavpstart: return 570
      case .tcuwakeup: return 600
      case .tcuswupdate: return 610
      case .tcurcsreset: return 620
      case .tcuinterrogation: return 630
      case .speedalertstart: return 710
      case .speedalertstop: return 720
      case .flshstart: return 750
      case .flshstop: return 760
      case .sigposstart: return 770
      case .contractconfigure: return 800
      case .contractremove: return 810
      case .rootconfigure: return 820
      case .rootremove: return 830
      case .tripcomp: return 850
      case .maintenanceconfigure: return 930
      case .maintenancecomputeroffset: return 931
      case .shorttestexecute: return 935
      case .serviceactivationconfigure: return 940
      case .dc2Serviceactivationconfigure: return 945
      case .dc2Rawdownload: return 950
      case .applicationconfiguration: return 955
      case .dc2Starttracking: return 960
      case .atpsequence: return 990
      case .theftalarmtoggleinterior: return 1000
      case .theftalarmtoggletow: return 1010
      case .theftalarmselectinteriortow: return 1020
      case .theftalarmdeselectinteriortow: return 1030
      case .theftalarmstop: return 1040
      case .windowopen: return 1100
      case .windowclose: return 1110
      case .windowventilate: return 1120
      case .windowmove: return 1121
      case .roofopen: return 1130
      case .roofclose: return 1140
      case .rooflift: return 1150
      case .roofmove: return 1151
      case .udxtriggersynchronization: return 1200
      case .udxactiveuserprofile: return 1210
      case .udxresetuserdata: return 1220
      case .userprofsynch: return 1230
      case .userdatareset: return 1240
      case .profactivationsnap: return 1250
      case .profactivationdirect: return 1255
      case .softwareupdate: return 1260
      case .pushnotification: return 1270
      case .mecallcommand: return 1310
      case .precondstartrcs: return 1400
      case .precondstoprcs: return 1410
      case .precondconfigurercs: return 1420
      case .tcuconfigure: return 1430
      case .edisonserviceactivation: return 1431
      case .testsequence: return 1432
      case .precondconfigureracp: return 1433
      case .chargeoptconfigureracp: return 1434
      case .tarifftabledownload: return 1435
      case .precondstartracp: return 1436
      case .precondstopracp: return 1437
      case .rootcertificateremove: return 1438
      case .onrequestprobeupload: return 1439
      case .rootcertificatedownload: return 1440
      case .contractcertificateremove: return 1441
      case .contractcertificatedownload: return 1442
      case .probeconfigurationupdate: return 1443
      case .rdiagdeleteecu: return 1500
      case .rdiagstatusreport: return 1501
      case .rdiagexecution: return 1502
      case .immobilizerchallenge: return 1600
      case .immobilizersearchkeyline: return 1610
      case .immobilizerreleasekeyline: return 1620
      case .immobilizerlockkeyline: return 1630
      case .setrentalsignal: return 1700
      case .blackchanneldownload: return 1800
      case .blackchannelupload: return 1810
      case .configurecsm: return 1900
      case .updatevehicleinfo: return 1901
      case .relaymessagetocsm: return 1902
      case .relayrentalrequesttocsb: return 1903
      case .batterymaxsoc: return 2000
      case .batterychargeprogram: return 2010
      case .chargeprogramconfigure: return 2020
      case .onboardfencescreate: return 2100
      case .onboardfencesupdate: return 2110
      case .onboardfencesdelete: return 2120
      case .speedfencescreate: return 2200
      case .speedfencesupdate: return 2210
      case .speedfencesdelete: return 2220
      case .chargingtariffscreate: return 2300
      case .chargingtariffsupdate: return 2310
      case .chargingtariffsdelete: return 2320
      case .rtmdownloadconfig: return 2400
      case .rtmreadconfig: return 2410
      case .theftalarmstart: return 2500
      case .theftalarmselectinterior: return 2510
      case .theftalarmdeselectinterior: return 2520
      case .theftalarmselecttow: return 2530
      case .theftalarmdeselecttow: return 2540
      case .theftalarmselectdamagedetection: return 2550
      case .theftalarmdeselectdamagedetection: return 2560
      case .theftalarmconfirmdamagedetection: return 2570
      case .mecall2Start: return 2600
      case .avpactivate: return 2700
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Proto_ACP.CommandType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_ACP.CommandType] = [
    .unknowncommandtype,
    .doorslock,
    .doorsunlock,
    .trunkunlock,
    .fuelflapunlock,
    .chargeflapunlock,
    .chargecouplerunlock,
    .doorspreparerental,
    .doorssecurevehicle,
    .auxheatstart,
    .auxheatstop,
    .auxheatconfigure,
    .temperatureconfigure,
    .weekprofileconfigure,
    .precondstart,
    .precondstop,
    .precondconfigure,
    .precondconfigureseats,
    .chargeoptconfigure,
    .chargeoptstart,
    .chargeoptstop,
    .feedpoi,
    .feedfreetext,
    .enginestart,
    .enginestop,
    .engineavpstart,
    .tcuwakeup,
    .tcuswupdate,
    .tcurcsreset,
    .tcuinterrogation,
    .speedalertstart,
    .speedalertstop,
    .flshstart,
    .flshstop,
    .sigposstart,
    .contractconfigure,
    .contractremove,
    .rootconfigure,
    .rootremove,
    .tripcomp,
    .maintenanceconfigure,
    .maintenancecomputeroffset,
    .shorttestexecute,
    .serviceactivationconfigure,
    .dc2Serviceactivationconfigure,
    .dc2Rawdownload,
    .applicationconfiguration,
    .dc2Starttracking,
    .atpsequence,
    .theftalarmtoggleinterior,
    .theftalarmtoggletow,
    .theftalarmselectinteriortow,
    .theftalarmdeselectinteriortow,
    .theftalarmstop,
    .windowopen,
    .windowclose,
    .windowventilate,
    .windowmove,
    .roofopen,
    .roofclose,
    .rooflift,
    .roofmove,
    .batterymaxsoc,
    .batterychargeprogram,
    .chargeprogramconfigure,
    .onboardfencescreate,
    .onboardfencesupdate,
    .onboardfencesdelete,
    .speedfencescreate,
    .speedfencesupdate,
    .speedfencesdelete,
    .chargingtariffscreate,
    .chargingtariffsupdate,
    .chargingtariffsdelete,
    .theftalarmstart,
    .theftalarmselectinterior,
    .theftalarmdeselectinterior,
    .theftalarmselecttow,
    .theftalarmdeselecttow,
    .theftalarmselectdamagedetection,
    .theftalarmdeselectdamagedetection,
    .theftalarmconfirmdamagedetection,
    .mecall2Start,
    .udxtriggersynchronization,
    .udxactiveuserprofile,
    .udxresetuserdata,
    .userprofsynch,
    .userdatareset,
    .profactivationsnap,
    .profactivationdirect,
    .softwareupdate,
    .pushnotification,
    .mecallcommand,
    .precondstartrcs,
    .precondstoprcs,
    .precondconfigurercs,
    .tcuconfigure,
    .edisonserviceactivation,
    .testsequence,
    .precondconfigureracp,
    .chargeoptconfigureracp,
    .tarifftabledownload,
    .precondstartracp,
    .precondstopracp,
    .rootcertificateremove,
    .onrequestprobeupload,
    .rootcertificatedownload,
    .contractcertificateremove,
    .contractcertificatedownload,
    .probeconfigurationupdate,
    .rdiagdeleteecu,
    .rdiagstatusreport,
    .rdiagexecution,
    .immobilizerchallenge,
    .immobilizersearchkeyline,
    .immobilizerreleasekeyline,
    .immobilizerlockkeyline,
    .setrentalsignal,
    .blackchanneldownload,
    .blackchannelupload,
    .configurecsm,
    .updatevehicleinfo,
    .relaymessagetocsm,
    .relayrentalrequesttocsb,
    .rtmdownloadconfig,
    .rtmreadconfig,
    .avpactivate,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_VVA: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VVA"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_VVA, rhs: Proto_VVA) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_VVA.CommandState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_COMMAND_STATE"),
    1010: .same(proto: "CREATED"),
    1012: .same(proto: "PROCESSING"),
    1016: .same(proto: "ENQUEUED"),
    1017: .same(proto: "SUSPENDED"),
    1018: .same(proto: "FINISHED"),
  ]
}

extension Proto_VVA.CommandCondition: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNWON_COMMAND_CONDITION"),
    1000: .same(proto: "NONE"),
    1001: .same(proto: "ACCEPTED"),
    1002: .same(proto: "REJECTED"),
    1003: .same(proto: "TERMINATE"),
    1011: .same(proto: "SUCCESS"),
    1013: .same(proto: "FAILED"),
    1014: .same(proto: "OVERWRITTEN"),
    1015: .same(proto: "TIMEOUT"),
  ]
}

extension Proto_VehicleAPI: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VehicleAPI"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_VehicleAPI, rhs: Proto_VehicleAPI) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_VehicleAPI.CommandState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_COMMAND_STATE"),
    1: .same(proto: "INITIATION"),
    2: .same(proto: "ENQUEUED"),
    3: .same(proto: "PROCESSING"),
    4: .same(proto: "WAITING"),
    5: .same(proto: "FINISHED"),
    6: .same(proto: "FAILED"),
  ]
}

extension Proto_VehicleAPI.AttributeStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VALUE_SET"),
    1: .same(proto: "VALUE_NOT_SET"),
    3: .same(proto: "INVALID"),
    4: .same(proto: "NOT_AVAILABLE"),
  ]
}

extension Proto_VehicleAPI.QueueType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .aliased(proto: "UNKNOWNCOMMANDQUEUETYPE", aliases: ["unknowncommandqueuetype"]),
    10: .aliased(proto: "DOORS", aliases: ["doors"]),
    11: .aliased(proto: "AUXHEAT", aliases: ["auxheat"]),
    12: .aliased(proto: "PRECOND", aliases: ["precond"]),
    13: .aliased(proto: "CHARGEOPT", aliases: ["chargeopt"]),
    14: .aliased(proto: "MAINTENANCE", aliases: ["maintenance"]),
    15: .aliased(proto: "TCU", aliases: ["tcu"]),
    16: .aliased(proto: "FEED", aliases: ["feed"]),
    17: .aliased(proto: "SERVICEACTIVATION", aliases: ["serviceactivation"]),
    18: .aliased(proto: "ATP", aliases: ["atp"]),
    19: .aliased(proto: "ASSISTANCE", aliases: ["assistance"]),
    20: .aliased(proto: "RACP", aliases: ["racp"]),
    21: .aliased(proto: "WEEKPROFILE", aliases: ["weekprofile"]),
    22: .aliased(proto: "REMOTEDIAGNOSIS", aliases: ["remotediagnosis"]),
    23: .aliased(proto: "FLSH", aliases: ["flsh"]),
    24: .aliased(proto: "TEMPERATURE", aliases: ["temperature"]),
    25: .aliased(proto: "TRIPCOMP", aliases: ["tripcomp"]),
    26: .aliased(proto: "ENGINE", aliases: ["engine"]),
    27: .aliased(proto: "THEFTALARM", aliases: ["theftalarm"]),
    28: .aliased(proto: "WINDOW", aliases: ["window"]),
    29: .aliased(proto: "HEADUNIT", aliases: ["headunit"]),
    31: .aliased(proto: "MECALL", aliases: ["mecall"]),
    32: .aliased(proto: "IMMOBILIZER", aliases: ["immobilizer"]),
    33: .aliased(proto: "RENTALSIGNAL", aliases: ["rentalsignal"]),
    34: .aliased(proto: "BCF", aliases: ["bcf"]),
    35: .aliased(proto: "PLUGANDCHARGE", aliases: ["plugandcharge"]),
    36: .aliased(proto: "CARSHARINGMODULE", aliases: ["carsharingmodule"]),
    37: .aliased(proto: "BATTERY", aliases: ["battery"]),
    38: .aliased(proto: "ONBOARDFENCES", aliases: ["onboardfences"]),
    39: .aliased(proto: "SPEEDFENCES", aliases: ["speedfences"]),
    40: .aliased(proto: "CHARGINGTARIFFS", aliases: ["chargingtariffs"]),
    41: .aliased(proto: "RTMCONFIG", aliases: ["rtmconfig"]),
    42: .aliased(proto: "MAINTENANCECOMPUTER", aliases: ["maintenancecomputer"]),
    43: .aliased(proto: "MECALL2", aliases: ["mecall2"]),
    44: .aliased(proto: "AUTOMATEDVALETPARKING", aliases: ["automatedvaletparking"]),
  ]
}

extension Proto_ACP: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ACP"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_ACP, rhs: Proto_ACP) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ACP.CommandType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .aliased(proto: "UNKNOWNCOMMANDTYPE", aliases: ["unknownCommandType"]),
    100: .aliased(proto: "DOORSLOCK", aliases: ["doorsLock"]),
    110: .aliased(proto: "DOORSUNLOCK", aliases: ["doorsUnlock"]),
    115: .aliased(proto: "TRUNKUNLOCK", aliases: ["trunkUnlock"]),
    116: .aliased(proto: "FUELFLAPUNLOCK", aliases: ["fuelflapUnlock"]),
    117: .aliased(proto: "CHARGEFLAPUNLOCK", aliases: ["chargeflapUnlock"]),
    118: .aliased(proto: "CHARGECOUPLERUNLOCK", aliases: ["chargecouplerUnlock"]),
    120: .aliased(proto: "DOORSPREPARERENTAL", aliases: ["doorsPrepareRental"]),
    130: .aliased(proto: "DOORSSECUREVEHICLE", aliases: ["doorsSecureVehicle"]),
    300: .aliased(proto: "AUXHEATSTART", aliases: ["auxheatStart"]),
    310: .aliased(proto: "AUXHEATSTOP", aliases: ["auxheatStop"]),
    320: .aliased(proto: "AUXHEATCONFIGURE", aliases: ["auxheatConfigure"]),
    350: .aliased(proto: "TEMPERATURECONFIGURE", aliases: ["temperatureConfigure"]),
    360: .aliased(proto: "WEEKPROFILECONFIGURE", aliases: ["weekprofileConfigure"]),
    400: .aliased(proto: "PRECONDSTART", aliases: ["precondStart"]),
    410: .aliased(proto: "PRECONDSTOP", aliases: ["precondStop"]),
    420: .aliased(proto: "PRECONDCONFIGURE", aliases: ["precondConfigure"]),
    425: .aliased(proto: "PRECONDCONFIGURESEATS", aliases: ["precondConfigureSeats"]),
    430: .aliased(proto: "CHARGEOPTCONFIGURE", aliases: ["chargeoptConfigure"]),
    440: .aliased(proto: "CHARGEOPTSTART", aliases: ["chargeoptStart"]),
    450: .aliased(proto: "CHARGEOPTSTOP", aliases: ["chargeoptStop"]),
    500: .aliased(proto: "FEEDPOI", aliases: ["feedPoi"]),
    510: .aliased(proto: "FEEDFREETEXT", aliases: ["feedFreetext"]),
    550: .aliased(proto: "ENGINESTART", aliases: ["engineStart"]),
    560: .aliased(proto: "ENGINESTOP", aliases: ["engineStop"]),
    570: .aliased(proto: "ENGINEAVPSTART", aliases: ["engineAvpstart"]),
    600: .aliased(proto: "TCUWAKEUP", aliases: ["tcuWakeup"]),
    610: .aliased(proto: "TCUSWUPDATE", aliases: ["tcuSwUpdate"]),
    620: .aliased(proto: "TCURCSRESET", aliases: ["tcuRcsReset"]),
    630: .aliased(proto: "TCUINTERROGATION", aliases: ["tcuInterrogation"]),
    710: .aliased(proto: "SPEEDALERTSTART", aliases: ["speedalertStart"]),
    720: .aliased(proto: "SPEEDALERTSTOP", aliases: ["speedalertStop"]),
    750: .aliased(proto: "FLSHSTART", aliases: ["flshStart"]),
    760: .aliased(proto: "FLSHSTOP", aliases: ["flshStop"]),
    770: .aliased(proto: "SIGPOSSTART", aliases: ["sigposStart"]),
    800: .aliased(proto: "CONTRACTCONFIGURE", aliases: ["contractConfigure"]),
    810: .aliased(proto: "CONTRACTREMOVE", aliases: ["contractRemove"]),
    820: .aliased(proto: "ROOTCONFIGURE", aliases: ["rootConfigure"]),
    830: .aliased(proto: "ROOTREMOVE", aliases: ["rootRemove"]),
    850: .aliased(proto: "TRIPCOMP", aliases: ["tripcomp"]),
    930: .aliased(proto: "MAINTENANCECONFIGURE", aliases: ["maintenanceConfigure"]),
    931: .aliased(proto: "MAINTENANCECOMPUTEROFFSET", aliases: ["maintenanceComputerOffset"]),
    935: .aliased(proto: "SHORTTESTEXECUTE", aliases: ["shorttestExecute"]),
    940: .aliased(proto: "SERVICEACTIVATIONCONFIGURE", aliases: ["serviceactivationConfigure"]),
    945: .aliased(proto: "DC2SERVICEACTIVATIONCONFIGURE", aliases: ["dc2ServiceactivationConfigure"]),
    950: .aliased(proto: "DC2RAWDOWNLOAD", aliases: ["dc2RawDownload"]),
    955: .aliased(proto: "APPLICATIONCONFIGURATION", aliases: ["applicationConfiguration"]),
    960: .aliased(proto: "DC2STARTTRACKING", aliases: ["dc2StartTracking"]),
    990: .aliased(proto: "ATPSEQUENCE", aliases: ["atpSequence"]),
    1000: .aliased(proto: "THEFTALARMTOGGLEINTERIOR", aliases: ["theftalarmToggleInterior"]),
    1010: .aliased(proto: "THEFTALARMTOGGLETOW", aliases: ["theftalarmToggleTow"]),
    1020: .aliased(proto: "THEFTALARMSELECTINTERIORTOW", aliases: ["theftalarmSelectInteriorTow"]),
    1030: .aliased(proto: "THEFTALARMDESELECTINTERIORTOW", aliases: ["theftalarmDeselectInteriorTow"]),
    1040: .aliased(proto: "THEFTALARMSTOP", aliases: ["theftalarmStop"]),
    1100: .aliased(proto: "WINDOWOPEN", aliases: ["windowOpen"]),
    1110: .aliased(proto: "WINDOWCLOSE", aliases: ["windowClose"]),
    1120: .aliased(proto: "WINDOWVENTILATE", aliases: ["windowVentilate"]),
    1121: .aliased(proto: "WINDOWMOVE", aliases: ["windowMove"]),
    1130: .aliased(proto: "ROOFOPEN", aliases: ["roofOpen"]),
    1140: .aliased(proto: "ROOFCLOSE", aliases: ["roofClose"]),
    1150: .aliased(proto: "ROOFLIFT", aliases: ["roofLift"]),
    1151: .aliased(proto: "ROOFMOVE", aliases: ["roofMove"]),
    1200: .aliased(proto: "UDXTRIGGERSYNCHRONIZATION", aliases: ["udxTriggerSynchronization"]),
    1210: .aliased(proto: "UDXACTIVEUSERPROFILE", aliases: ["udxActiveUserProfile"]),
    1220: .aliased(proto: "UDXRESETUSERDATA", aliases: ["udxResetUserData"]),
    1230: .aliased(proto: "USERPROFSYNCH", aliases: ["userProfSynch"]),
    1240: .aliased(proto: "USERDATARESET", aliases: ["userDataReset"]),
    1250: .aliased(proto: "PROFACTIVATIONSNAP", aliases: ["profActivationSnap"]),
    1255: .aliased(proto: "PROFACTIVATIONDIRECT", aliases: ["profActivationDirect"]),
    1260: .aliased(proto: "SOFTWAREUPDATE", aliases: ["softwareUpdate"]),
    1270: .aliased(proto: "PUSHNOTIFICATION", aliases: ["pushNotification"]),
    1310: .aliased(proto: "MECALLCOMMAND", aliases: ["mecallcommand"]),
    1400: .aliased(proto: "PRECONDSTARTRCS", aliases: ["precondStartRcs"]),
    1410: .aliased(proto: "PRECONDSTOPRCS", aliases: ["precondStopRcs"]),
    1420: .aliased(proto: "PRECONDCONFIGURERCS", aliases: ["precondConfigureRcs"]),
    1430: .aliased(proto: "TCUCONFIGURE", aliases: ["tcuConfigure"]),
    1431: .aliased(proto: "EDISONSERVICEACTIVATION", aliases: ["edisonServiceActivation"]),
    1432: .aliased(proto: "TESTSEQUENCE", aliases: ["testSequence"]),
    1433: .aliased(proto: "PRECONDCONFIGURERACP", aliases: ["precondConfigureRacp"]),
    1434: .aliased(proto: "CHARGEOPTCONFIGURERACP", aliases: ["chargeoptConfigureRacp"]),
    1435: .aliased(proto: "TARIFFTABLEDOWNLOAD", aliases: ["tariffTableDownload"]),
    1436: .aliased(proto: "PRECONDSTARTRACP", aliases: ["precondStartRacp"]),
    1437: .aliased(proto: "PRECONDSTOPRACP", aliases: ["precondStopRacp"]),
    1438: .aliased(proto: "ROOTCERTIFICATEREMOVE", aliases: ["rootCertificateRemove"]),
    1439: .aliased(proto: "ONREQUESTPROBEUPLOAD", aliases: ["onRequestProbeUpload"]),
    1440: .aliased(proto: "ROOTCERTIFICATEDOWNLOAD", aliases: ["rootCertificateDownload"]),
    1441: .aliased(proto: "CONTRACTCERTIFICATEREMOVE", aliases: ["contractCertificateRemove"]),
    1442: .aliased(proto: "CONTRACTCERTIFICATEDOWNLOAD", aliases: ["contractCertificateDownload"]),
    1443: .aliased(proto: "PROBECONFIGURATIONUPDATE", aliases: ["probeConfigurationUpdate"]),
    1500: .aliased(proto: "RDIAGDELETEECU", aliases: ["rdiagDeleteEcu"]),
    1501: .aliased(proto: "RDIAGSTATUSREPORT", aliases: ["rdiagStatusReport"]),
    1502: .aliased(proto: "RDIAGEXECUTION", aliases: ["rdiagExecution"]),
    1600: .aliased(proto: "IMMOBILIZERCHALLENGE", aliases: ["immobilizerChallenge"]),
    1610: .aliased(proto: "IMMOBILIZERSEARCHKEYLINE", aliases: ["immobilizerSearchKeyline"]),
    1620: .aliased(proto: "IMMOBILIZERRELEASEKEYLINE", aliases: ["immobilizerReleaseKeyline"]),
    1630: .aliased(proto: "IMMOBILIZERLOCKKEYLINE", aliases: ["immobilizerLockKeyline"]),
    1700: .aliased(proto: "SETRENTALSIGNAL", aliases: ["setRentalSignal"]),
    1800: .aliased(proto: "BLACKCHANNELDOWNLOAD", aliases: ["blackchannelDownload"]),
    1810: .aliased(proto: "BLACKCHANNELUPLOAD", aliases: ["blackchannelUpload"]),
    1900: .aliased(proto: "CONFIGURECSM", aliases: ["configurecsm"]),
    1901: .aliased(proto: "UPDATEVEHICLEINFO", aliases: ["updatevehicleinfo"]),
    1902: .aliased(proto: "RELAYMESSAGETOCSM", aliases: ["relaymessagetocsm"]),
    1903: .aliased(proto: "RELAYRENTALREQUESTTOCSB", aliases: ["relayrentalrequesttocsb"]),
    2000: .aliased(proto: "BATTERYMAXSOC", aliases: ["batteryMaxsoc"]),
    2010: .aliased(proto: "BATTERYCHARGEPROGRAM", aliases: ["batteryChargeprogram"]),
    2020: .aliased(proto: "CHARGEPROGRAMCONFIGURE", aliases: ["chargeprogramconfigure"]),
    2100: .aliased(proto: "ONBOARDFENCESCREATE", aliases: ["onboardfencesCreate"]),
    2110: .aliased(proto: "ONBOARDFENCESUPDATE", aliases: ["onboardfencesUpdate"]),
    2120: .aliased(proto: "ONBOARDFENCESDELETE", aliases: ["onboardfencesDelete"]),
    2200: .aliased(proto: "SPEEDFENCESCREATE", aliases: ["speedfencesCreate"]),
    2210: .aliased(proto: "SPEEDFENCESUPDATE", aliases: ["speedfencesUpdate"]),
    2220: .aliased(proto: "SPEEDFENCESDELETE", aliases: ["speedfencesDelete"]),
    2300: .aliased(proto: "CHARGINGTARIFFSCREATE", aliases: ["chargingtariffsCreate"]),
    2310: .aliased(proto: "CHARGINGTARIFFSUPDATE", aliases: ["chargingtariffsUpdate"]),
    2320: .aliased(proto: "CHARGINGTARIFFSDELETE", aliases: ["chargingtariffsDelete"]),
    2400: .aliased(proto: "RTMDOWNLOADCONFIG", aliases: ["rtmDownloadConfig"]),
    2410: .aliased(proto: "RTMREADCONFIG", aliases: ["rtmReadConfig"]),
    2500: .aliased(proto: "THEFTALARMSTART", aliases: ["theftalarmstart"]),
    2510: .aliased(proto: "THEFTALARMSELECTINTERIOR", aliases: ["theftalarmselectinterior"]),
    2520: .aliased(proto: "THEFTALARMDESELECTINTERIOR", aliases: ["theftalarmdeselectinterior"]),
    2530: .aliased(proto: "THEFTALARMSELECTTOW", aliases: ["theftalarmselecttow"]),
    2540: .aliased(proto: "THEFTALARMDESELECTTOW", aliases: ["theftalarmdeselecttow"]),
    2550: .aliased(proto: "THEFTALARMSELECTDAMAGEDETECTION", aliases: ["theftalarmselectdamagedetection"]),
    2560: .aliased(proto: "THEFTALARMDESELECTDAMAGEDETECTION", aliases: ["theftalarmdeselectdamagedetection"]),
    2570: .aliased(proto: "THEFTALARMCONFIRMDAMAGEDETECTION", aliases: ["theftalarmconfirmdamagedetection"]),
    2600: .aliased(proto: "MECALL2START", aliases: ["mecall2start"]),
    2700: .aliased(proto: "AVPACTIVATE", aliases: ["avpActivate"]),
  ]
}
