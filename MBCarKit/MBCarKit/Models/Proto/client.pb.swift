// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: client.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// message that is sent from the client
/// Sending direction: App -> BFF (-> AppTwin)
struct Proto_ClientMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trackingID: String {
    get {return _storage._trackingID}
    set {_uniqueStorage()._trackingID = newValue}
  }

  var msg: OneOf_Msg? {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  var unsubscribeRequest: Proto_UnsubscribeRequest {
    get {
      if case .unsubscribeRequest(let v)? = _storage._msg {return v}
      return Proto_UnsubscribeRequest()
    }
    set {_uniqueStorage()._msg = .unsubscribeRequest(newValue)}
  }

  var commandRequest: Proto_CommandRequest {
    get {
      if case .commandRequest(let v)? = _storage._msg {return v}
      return Proto_CommandRequest()
    }
    set {_uniqueStorage()._msg = .commandRequest(newValue)}
  }

  var trackingEvent: Proto_TrackingEvent {
    get {
      if case .trackingEvent(let v)? = _storage._msg {return v}
      return Proto_TrackingEvent()
    }
    set {_uniqueStorage()._msg = .trackingEvent(newValue)}
  }

  var pingInterval: Proto_ConfigurePingInterval {
    get {
      if case .pingInterval(let v)? = _storage._msg {return v}
      return Proto_ConfigurePingInterval()
    }
    set {_uniqueStorage()._msg = .pingInterval(newValue)}
  }

  var acknowledgeVepRequest: Proto_AcknowledgeVEPRequest {
    get {
      if case .acknowledgeVepRequest(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeVEPRequest()
    }
    set {_uniqueStorage()._msg = .acknowledgeVepRequest(newValue)}
  }

  var acknowledgeCommandStatusUpdateRequest: Proto_AcknowledgeCommandStatusUpdateRequest {
    get {
      if case .acknowledgeCommandStatusUpdateRequest(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeCommandStatusUpdateRequest()
    }
    set {_uniqueStorage()._msg = .acknowledgeCommandStatusUpdateRequest(newValue)}
  }

  var acknowledgeServiceStatusUpdatesByVin: Proto_AcknowledgeServiceStatusUpdatesByVIN {
    get {
      if case .acknowledgeServiceStatusUpdatesByVin(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeServiceStatusUpdatesByVIN()
    }
    set {_uniqueStorage()._msg = .acknowledgeServiceStatusUpdatesByVin(newValue)}
  }

  var acknowledgeServiceStatusUpdate: Proto_AcknowledgeServiceStatusUpdate {
    get {
      if case .acknowledgeServiceStatusUpdate(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeServiceStatusUpdate()
    }
    set {_uniqueStorage()._msg = .acknowledgeServiceStatusUpdate(newValue)}
  }

  var acknowledgeUserDataUpdate: Proto_AcknowledgeUserDataUpdate {
    get {
      if case .acknowledgeUserDataUpdate(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeUserDataUpdate()
    }
    set {_uniqueStorage()._msg = .acknowledgeUserDataUpdate(newValue)}
  }

  var acknowledgeUserPictureUpdate: Proto_AcknowledgeUserPictureUpdate {
    get {
      if case .acknowledgeUserPictureUpdate(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeUserPictureUpdate()
    }
    set {_uniqueStorage()._msg = .acknowledgeUserPictureUpdate(newValue)}
  }

  var acknowledgeUserPinUpdate: Proto_AcknowledgeUserPINUpdate {
    get {
      if case .acknowledgeUserPinUpdate(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeUserPINUpdate()
    }
    set {_uniqueStorage()._msg = .acknowledgeUserPinUpdate(newValue)}
  }

  var updateUserJwtRequest: Proto_UpdateUserJWTRequest {
    get {
      if case .updateUserJwtRequest(let v)? = _storage._msg {return v}
      return Proto_UpdateUserJWTRequest()
    }
    set {_uniqueStorage()._msg = .updateUserJwtRequest(newValue)}
  }

  var acknowledgeUserVehicleAuthChangedUpdate: Proto_AcknowledgeUserVehicleAuthChangedUpdate {
    get {
      if case .acknowledgeUserVehicleAuthChangedUpdate(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeUserVehicleAuthChangedUpdate()
    }
    set {_uniqueStorage()._msg = .acknowledgeUserVehicleAuthChangedUpdate(newValue)}
  }

  var acknowledgeAbilityToGetVehicleMasterDataFromRestApi: Proto_AcknowledgeAbilityToGetVehicleMasterDataFromRestAPI {
    get {
      if case .acknowledgeAbilityToGetVehicleMasterDataFromRestApi(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeAbilityToGetVehicleMasterDataFromRestAPI()
    }
    set {_uniqueStorage()._msg = .acknowledgeAbilityToGetVehicleMasterDataFromRestApi(newValue)}
  }

  var acknowledgeVehicleUpdated: Proto_AcknowledgeVehicleUpdated {
    get {
      if case .acknowledgeVehicleUpdated(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeVehicleUpdated()
    }
    set {_uniqueStorage()._msg = .acknowledgeVehicleUpdated(newValue)}
  }

  var acknowledgePreferredDealerChange: Proto_AcknowledgePreferredDealerChange {
    get {
      if case .acknowledgePreferredDealerChange(let v)? = _storage._msg {return v}
      return Proto_AcknowledgePreferredDealerChange()
    }
    set {_uniqueStorage()._msg = .acknowledgePreferredDealerChange(newValue)}
  }

  var acknowledgeApptwinCommandStatusUpdateByVin: Proto_AcknowledgeAppTwinCommandStatusUpdatesByVIN {
    get {
      if case .acknowledgeApptwinCommandStatusUpdateByVin(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeAppTwinCommandStatusUpdatesByVIN()
    }
    set {_uniqueStorage()._msg = .acknowledgeApptwinCommandStatusUpdateByVin(newValue)}
  }

  var logout: Proto_Logout {
    get {
      if case .logout(let v)? = _storage._msg {return v}
      return Proto_Logout()
    }
    set {_uniqueStorage()._msg = .logout(newValue)}
  }

  var apptwinPendingCommandsResponse: Proto_AppTwinPendingCommandsResponse {
    get {
      if case .apptwinPendingCommandsResponse(let v)? = _storage._msg {return v}
      return Proto_AppTwinPendingCommandsResponse()
    }
    set {_uniqueStorage()._msg = .apptwinPendingCommandsResponse(newValue)}
  }

  var acknowledgeVepUpdatesByVin: Proto_AcknowledgeVEPUpdatesByVIN {
    get {
      if case .acknowledgeVepUpdatesByVin(let v)? = _storage._msg {return v}
      return Proto_AcknowledgeVEPUpdatesByVIN()
    }
    set {_uniqueStorage()._msg = .acknowledgeVepUpdatesByVin(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Msg: Equatable {
    case unsubscribeRequest(Proto_UnsubscribeRequest)
    case commandRequest(Proto_CommandRequest)
    case trackingEvent(Proto_TrackingEvent)
    case pingInterval(Proto_ConfigurePingInterval)
    case acknowledgeVepRequest(Proto_AcknowledgeVEPRequest)
    case acknowledgeCommandStatusUpdateRequest(Proto_AcknowledgeCommandStatusUpdateRequest)
    case acknowledgeServiceStatusUpdatesByVin(Proto_AcknowledgeServiceStatusUpdatesByVIN)
    case acknowledgeServiceStatusUpdate(Proto_AcknowledgeServiceStatusUpdate)
    case acknowledgeUserDataUpdate(Proto_AcknowledgeUserDataUpdate)
    case acknowledgeUserPictureUpdate(Proto_AcknowledgeUserPictureUpdate)
    case acknowledgeUserPinUpdate(Proto_AcknowledgeUserPINUpdate)
    case updateUserJwtRequest(Proto_UpdateUserJWTRequest)
    case acknowledgeUserVehicleAuthChangedUpdate(Proto_AcknowledgeUserVehicleAuthChangedUpdate)
    case acknowledgeAbilityToGetVehicleMasterDataFromRestApi(Proto_AcknowledgeAbilityToGetVehicleMasterDataFromRestAPI)
    case acknowledgeVehicleUpdated(Proto_AcknowledgeVehicleUpdated)
    case acknowledgePreferredDealerChange(Proto_AcknowledgePreferredDealerChange)
    case acknowledgeApptwinCommandStatusUpdateByVin(Proto_AcknowledgeAppTwinCommandStatusUpdatesByVIN)
    case logout(Proto_Logout)
    case apptwinPendingCommandsResponse(Proto_AppTwinPendingCommandsResponse)
    case acknowledgeVepUpdatesByVin(Proto_AcknowledgeVEPUpdatesByVIN)

  #if !swift(>=4.1)
    static func ==(lhs: Proto_ClientMessage.OneOf_Msg, rhs: Proto_ClientMessage.OneOf_Msg) -> Bool {
      switch (lhs, rhs) {
      case (.unsubscribeRequest(let l), .unsubscribeRequest(let r)): return l == r
      case (.commandRequest(let l), .commandRequest(let r)): return l == r
      case (.trackingEvent(let l), .trackingEvent(let r)): return l == r
      case (.pingInterval(let l), .pingInterval(let r)): return l == r
      case (.acknowledgeVepRequest(let l), .acknowledgeVepRequest(let r)): return l == r
      case (.acknowledgeCommandStatusUpdateRequest(let l), .acknowledgeCommandStatusUpdateRequest(let r)): return l == r
      case (.acknowledgeServiceStatusUpdatesByVin(let l), .acknowledgeServiceStatusUpdatesByVin(let r)): return l == r
      case (.acknowledgeServiceStatusUpdate(let l), .acknowledgeServiceStatusUpdate(let r)): return l == r
      case (.acknowledgeUserDataUpdate(let l), .acknowledgeUserDataUpdate(let r)): return l == r
      case (.acknowledgeUserPictureUpdate(let l), .acknowledgeUserPictureUpdate(let r)): return l == r
      case (.acknowledgeUserPinUpdate(let l), .acknowledgeUserPinUpdate(let r)): return l == r
      case (.updateUserJwtRequest(let l), .updateUserJwtRequest(let r)): return l == r
      case (.acknowledgeUserVehicleAuthChangedUpdate(let l), .acknowledgeUserVehicleAuthChangedUpdate(let r)): return l == r
      case (.acknowledgeAbilityToGetVehicleMasterDataFromRestApi(let l), .acknowledgeAbilityToGetVehicleMasterDataFromRestApi(let r)): return l == r
      case (.acknowledgeVehicleUpdated(let l), .acknowledgeVehicleUpdated(let r)): return l == r
      case (.acknowledgePreferredDealerChange(let l), .acknowledgePreferredDealerChange(let r)): return l == r
      case (.acknowledgeApptwinCommandStatusUpdateByVin(let l), .acknowledgeApptwinCommandStatusUpdateByVin(let r)): return l == r
      case (.logout(let l), .logout(let r)): return l == r
      case (.apptwinPendingCommandsResponse(let l), .apptwinPendingCommandsResponse(let r)): return l == r
      case (.acknowledgeVepUpdatesByVin(let l), .acknowledgeVepUpdatesByVin(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Message to send from the app right before logging out of keycloak
/// Stops the corresponding AppTwin actor and shuts it down and
/// stops the websocket actor (but does not shut it down. This automatically happens, when the websocket connection is terminated)
struct Proto_Logout {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_ClientMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .standard(proto: "tracking_id"),
    2: .same(proto: "unsubscribeRequest"),
    3: .same(proto: "commandRequest"),
    4: .standard(proto: "tracking_event"),
    6: .standard(proto: "ping_interval"),
    7: .standard(proto: "acknowledge_vep_request"),
    8: .standard(proto: "acknowledge_command_status_update_request"),
    9: .standard(proto: "acknowledge_service_status_updates_by_vin"),
    13: .standard(proto: "acknowledge_service_status_update"),
    10: .standard(proto: "acknowledge_user_data_update"),
    11: .standard(proto: "acknowledge_user_picture_update"),
    12: .standard(proto: "acknowledge_user_pin_update"),
    14: .standard(proto: "update_user_jwt_request"),
    15: .standard(proto: "acknowledge_user_vehicle_auth_changed_update"),
    16: .standard(proto: "acknowledge_ability_to_get_vehicle_master_data_from_rest_api"),
    17: .standard(proto: "acknowledge_vehicle_updated"),
    18: .standard(proto: "acknowledge_preferred_dealer_change"),
    19: .standard(proto: "acknowledge_apptwin_command_status_update_by_vin"),
    20: .same(proto: "logout"),
    21: .standard(proto: "apptwin_pending_commands_response"),
    22: .standard(proto: "acknowledge_vep_updates_by_vin"),
  ]

  fileprivate class _StorageClass {
    var _trackingID: String = String()
    var _msg: Proto_ClientMessage.OneOf_Msg?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _trackingID = source._trackingID
      _msg = source._msg
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: Proto_UnsubscribeRequest?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .unsubscribeRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .unsubscribeRequest(v)}
        case 3:
          var v: Proto_CommandRequest?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .commandRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .commandRequest(v)}
        case 4:
          var v: Proto_TrackingEvent?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .trackingEvent(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .trackingEvent(v)}
        case 5: try decoder.decodeSingularStringField(value: &_storage._trackingID)
        case 6:
          var v: Proto_ConfigurePingInterval?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .pingInterval(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .pingInterval(v)}
        case 7:
          var v: Proto_AcknowledgeVEPRequest?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeVepRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeVepRequest(v)}
        case 8:
          var v: Proto_AcknowledgeCommandStatusUpdateRequest?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeCommandStatusUpdateRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeCommandStatusUpdateRequest(v)}
        case 9:
          var v: Proto_AcknowledgeServiceStatusUpdatesByVIN?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeServiceStatusUpdatesByVin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeServiceStatusUpdatesByVin(v)}
        case 10:
          var v: Proto_AcknowledgeUserDataUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeUserDataUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeUserDataUpdate(v)}
        case 11:
          var v: Proto_AcknowledgeUserPictureUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeUserPictureUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeUserPictureUpdate(v)}
        case 12:
          var v: Proto_AcknowledgeUserPINUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeUserPinUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeUserPinUpdate(v)}
        case 13:
          var v: Proto_AcknowledgeServiceStatusUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeServiceStatusUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeServiceStatusUpdate(v)}
        case 14:
          var v: Proto_UpdateUserJWTRequest?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .updateUserJwtRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .updateUserJwtRequest(v)}
        case 15:
          var v: Proto_AcknowledgeUserVehicleAuthChangedUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeUserVehicleAuthChangedUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeUserVehicleAuthChangedUpdate(v)}
        case 16:
          var v: Proto_AcknowledgeAbilityToGetVehicleMasterDataFromRestAPI?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeAbilityToGetVehicleMasterDataFromRestApi(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeAbilityToGetVehicleMasterDataFromRestApi(v)}
        case 17:
          var v: Proto_AcknowledgeVehicleUpdated?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeVehicleUpdated(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeVehicleUpdated(v)}
        case 18:
          var v: Proto_AcknowledgePreferredDealerChange?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgePreferredDealerChange(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgePreferredDealerChange(v)}
        case 19:
          var v: Proto_AcknowledgeAppTwinCommandStatusUpdatesByVIN?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeApptwinCommandStatusUpdateByVin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeApptwinCommandStatusUpdateByVin(v)}
        case 20:
          var v: Proto_Logout?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .logout(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .logout(v)}
        case 21:
          var v: Proto_AppTwinPendingCommandsResponse?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .apptwinPendingCommandsResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .apptwinPendingCommandsResponse(v)}
        case 22:
          var v: Proto_AcknowledgeVEPUpdatesByVIN?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .acknowledgeVepUpdatesByVin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .acknowledgeVepUpdatesByVin(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._msg {
      case .unsubscribeRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .commandRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .trackingEvent(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      default: break
      }
      if !_storage._trackingID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._trackingID, fieldNumber: 5)
      }
      switch _storage._msg {
      case .pingInterval(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .acknowledgeVepRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .acknowledgeCommandStatusUpdateRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .acknowledgeServiceStatusUpdatesByVin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .acknowledgeUserDataUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .acknowledgeUserPictureUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .acknowledgeUserPinUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .acknowledgeServiceStatusUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .updateUserJwtRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .acknowledgeUserVehicleAuthChangedUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .acknowledgeAbilityToGetVehicleMasterDataFromRestApi(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case .acknowledgeVehicleUpdated(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      case .acknowledgePreferredDealerChange(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      case .acknowledgeApptwinCommandStatusUpdateByVin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      case .logout(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      case .apptwinPendingCommandsResponse(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      case .acknowledgeVepUpdatesByVin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      case nil: break
      default: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_ClientMessage, rhs: Proto_ClientMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._trackingID != rhs_storage._trackingID {return false}
        if _storage._msg != rhs_storage._msg {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Logout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Logout"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_Logout, rhs: Proto_Logout) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
