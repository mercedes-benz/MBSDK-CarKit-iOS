// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vehicle-events.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Same as VehicleAPI.AttributeStatus but with slightly different names. The VehicleAPI.AttributeStatus enum values
/// can't be changed because they are used to automatically parse the vehicleAPI responses. Adding type aliases would
/// confuse the contributions developers, so we added another attribute status enum
enum Proto_AttributeStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Value is set and valid
  case valueValid // = 0

  /// Value has not yet been received from the vehicle (but sensor etc. should be available)
  case valueNotReceived // = 1

  /// Value has been retrieved from vehicle but is invalid (marked as invalid by DaiVB backend)
  case valueInvalid // = 3

  /// Vehicle does not support this attribute (e.g. does not have the sensor etc.)
  case valueNotAvailable // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .valueValid
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .valueValid
    case 1: self = .valueNotReceived
    case 3: self = .valueInvalid
    case 4: self = .valueNotAvailable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .valueValid: return 0
    case .valueNotReceived: return 1
    case .valueInvalid: return 3
    case .valueNotAvailable: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_AttributeStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_AttributeStatus] = [
    .valueValid,
    .valueNotReceived,
    .valueInvalid,
    .valueNotAvailable,
  ]
}

#endif  // swift(>=4.2)

/// Sending direction: App <- BFF <- AppTwin
struct Proto_VEPUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNumber: Int32 = 0

  var vin: String = String()

  /// when was the event emitted? This is the time of the update (unix timestamp in seconds), (deprecated)
  /// not when the attributes where changed. To compare attribute changes, you need to look into each attribute timestamp
  var emitTimestamp: Int64 = 0

  /// when was the event emitted? This is the time of the update (unix timestamp in milliseconds),
  var emitTimestampInMs: Int64 = 0

  /// the attribute changes are a list of changed attributes
  var attributes: Dictionary<String,Proto_VehicleAttributeStatus> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Part of a VEPUpdate
/// Sending direction: App <- BFF <- AppTwin
struct Proto_VehicleAttributeStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// time of the attribute change in the car as unix timestamp in seconds with UTC timezone (deprecated)
  var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  /// time of the attribute change in the car as unix timestamp in milliseconds with UTC timezone
  var timestampInMs: Int64 {
    get {return _storage._timestampInMs}
    set {_uniqueStorage()._timestampInMs = newValue}
  }

  var changed: Bool {
    get {return _storage._changed}
    set {_uniqueStorage()._changed = newValue}
  }

  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var displayValue: String {
    get {return _storage._displayValue}
    set {_uniqueStorage()._displayValue = newValue}
  }

  var displayUnit: OneOf_DisplayUnit? {
    get {return _storage._displayUnit}
    set {_uniqueStorage()._displayUnit = newValue}
  }

  var combustionConsumptionUnit: Proto_VehicleAttributeStatus.CombustionConsumptionUnit {
    get {
      if case .combustionConsumptionUnit(let v)? = _storage._displayUnit {return v}
      return .unspecifiedCombustionConsumptionUnit
    }
    set {_uniqueStorage()._displayUnit = .combustionConsumptionUnit(newValue)}
  }

  var gasConsumptionUnit: Proto_VehicleAttributeStatus.GasConsumptionUnit {
    get {
      if case .gasConsumptionUnit(let v)? = _storage._displayUnit {return v}
      return .unspecifiedGasConsumptionUnit
    }
    set {_uniqueStorage()._displayUnit = .gasConsumptionUnit(newValue)}
  }

  var electricityConsumptionUnit: Proto_VehicleAttributeStatus.ElectricityConsumptionUnit {
    get {
      if case .electricityConsumptionUnit(let v)? = _storage._displayUnit {return v}
      return .unspecifiedElectricityConsumptionUnit
    }
    set {_uniqueStorage()._displayUnit = .electricityConsumptionUnit(newValue)}
  }

  /// use speed unit / length unit instead
  var speedDistanceUnit: Proto_VehicleAttributeStatus.SpeedDistanceUnit {
    get {
      if case .speedDistanceUnit(let v)? = _storage._displayUnit {return v}
      return .unspecifiedSpeedDistanceUnit
    }
    set {_uniqueStorage()._displayUnit = .speedDistanceUnit(newValue)}
  }

  var speedUnit: Proto_VehicleAttributeStatus.SpeedUnit {
    get {
      if case .speedUnit(let v)? = _storage._displayUnit {return v}
      return .unspecifiedSpeedUnit
    }
    set {_uniqueStorage()._displayUnit = .speedUnit(newValue)}
  }

  var distanceUnit: Proto_VehicleAttributeStatus.DistanceUnit {
    get {
      if case .distanceUnit(let v)? = _storage._displayUnit {return v}
      return .unspecifiedDistanceUnit
    }
    set {_uniqueStorage()._displayUnit = .distanceUnit(newValue)}
  }

  var temperatureUnit: Proto_VehicleAttributeStatus.TemperatureUnit {
    get {
      if case .temperatureUnit(let v)? = _storage._displayUnit {return v}
      return .unspecifiedTemperatureUnit
    }
    set {_uniqueStorage()._displayUnit = .temperatureUnit(newValue)}
  }

  var pressureUnit: Proto_VehicleAttributeStatus.PressureUnit {
    get {
      if case .pressureUnit(let v)? = _storage._displayUnit {return v}
      return .unspecifiedPressureUnit
    }
    set {_uniqueStorage()._displayUnit = .pressureUnit(newValue)}
  }

  var ratioUnit: Proto_VehicleAttributeStatus.RatioUnit {
    get {
      if case .ratioUnit(let v)? = _storage._displayUnit {return v}
      return .unspecifiedRatioUnit
    }
    set {_uniqueStorage()._displayUnit = .ratioUnit(newValue)}
  }

  var clockHourUnit: Proto_VehicleAttributeStatus.ClockHourUnit {
    get {
      if case .clockHourUnit(let v)? = _storage._displayUnit {return v}
      return .unspecifiedClockHourUnit
    }
    set {_uniqueStorage()._displayUnit = .clockHourUnit(newValue)}
  }

  var attributeType: OneOf_AttributeType? {
    get {return _storage._attributeType}
    set {_uniqueStorage()._attributeType = newValue}
  }

  var intValue: Int64 {
    get {
      if case .intValue(let v)? = _storage._attributeType {return v}
      return 0
    }
    set {_uniqueStorage()._attributeType = .intValue(newValue)}
  }

  var boolValue: Bool {
    get {
      if case .boolValue(let v)? = _storage._attributeType {return v}
      return false
    }
    set {_uniqueStorage()._attributeType = .boolValue(newValue)}
  }

  var stringValue: String {
    get {
      if case .stringValue(let v)? = _storage._attributeType {return v}
      return String()
    }
    set {_uniqueStorage()._attributeType = .stringValue(newValue)}
  }

  var doubleValue: Double {
    get {
      if case .doubleValue(let v)? = _storage._attributeType {return v}
      return 0
    }
    set {_uniqueStorage()._attributeType = .doubleValue(newValue)}
  }

  var nilValue: Bool {
    get {
      if case .nilValue(let v)? = _storage._attributeType {return v}
      return false
    }
    set {_uniqueStorage()._attributeType = .nilValue(newValue)}
  }

  var unsupportedValue: String {
    get {
      if case .unsupportedValue(let v)? = _storage._attributeType {return v}
      return String()
    }
    set {_uniqueStorage()._attributeType = .unsupportedValue(newValue)}
  }

  var temperaturePointsValue: Proto_TemperaturePointsValue {
    get {
      if case .temperaturePointsValue(let v)? = _storage._attributeType {return v}
      return Proto_TemperaturePointsValue()
    }
    set {_uniqueStorage()._attributeType = .temperaturePointsValue(newValue)}
  }

  var weekdayTariffValue: Proto_WeekdayTariffValue {
    get {
      if case .weekdayTariffValue(let v)? = _storage._attributeType {return v}
      return Proto_WeekdayTariffValue()
    }
    set {_uniqueStorage()._attributeType = .weekdayTariffValue(newValue)}
  }

  var weekendTariffValue: Proto_WeekendTariffValue {
    get {
      if case .weekendTariffValue(let v)? = _storage._attributeType {return v}
      return Proto_WeekendTariffValue()
    }
    set {_uniqueStorage()._attributeType = .weekendTariffValue(newValue)}
  }

  var stateOfChargeProfileValue: Proto_StateOfChargeProfileValue {
    get {
      if case .stateOfChargeProfileValue(let v)? = _storage._attributeType {return v}
      return Proto_StateOfChargeProfileValue()
    }
    set {_uniqueStorage()._attributeType = .stateOfChargeProfileValue(newValue)}
  }

  var weeklySettingsHeadUnitValue: Proto_WeeklySettingsHeadUnitValue {
    get {
      if case .weeklySettingsHeadUnitValue(let v)? = _storage._attributeType {return v}
      return Proto_WeeklySettingsHeadUnitValue()
    }
    set {_uniqueStorage()._attributeType = .weeklySettingsHeadUnitValue(newValue)}
  }

  var speedAlertConfigurationValue: Proto_SpeedAlertConfigurationValue {
    get {
      if case .speedAlertConfigurationValue(let v)? = _storage._attributeType {return v}
      return Proto_SpeedAlertConfigurationValue()
    }
    set {_uniqueStorage()._attributeType = .speedAlertConfigurationValue(newValue)}
  }

  var ecoHistogramValue: Proto_EcoHistogramValue {
    get {
      if case .ecoHistogramValue(let v)? = _storage._attributeType {return v}
      return Proto_EcoHistogramValue()
    }
    set {_uniqueStorage()._attributeType = .ecoHistogramValue(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_DisplayUnit: Equatable {
    case combustionConsumptionUnit(Proto_VehicleAttributeStatus.CombustionConsumptionUnit)
    case gasConsumptionUnit(Proto_VehicleAttributeStatus.GasConsumptionUnit)
    case electricityConsumptionUnit(Proto_VehicleAttributeStatus.ElectricityConsumptionUnit)
    /// use speed unit / length unit instead
    case speedDistanceUnit(Proto_VehicleAttributeStatus.SpeedDistanceUnit)
    case speedUnit(Proto_VehicleAttributeStatus.SpeedUnit)
    case distanceUnit(Proto_VehicleAttributeStatus.DistanceUnit)
    case temperatureUnit(Proto_VehicleAttributeStatus.TemperatureUnit)
    case pressureUnit(Proto_VehicleAttributeStatus.PressureUnit)
    case ratioUnit(Proto_VehicleAttributeStatus.RatioUnit)
    case clockHourUnit(Proto_VehicleAttributeStatus.ClockHourUnit)

  #if !swift(>=4.1)
    static func ==(lhs: Proto_VehicleAttributeStatus.OneOf_DisplayUnit, rhs: Proto_VehicleAttributeStatus.OneOf_DisplayUnit) -> Bool {
      switch (lhs, rhs) {
      case (.combustionConsumptionUnit(let l), .combustionConsumptionUnit(let r)): return l == r
      case (.gasConsumptionUnit(let l), .gasConsumptionUnit(let r)): return l == r
      case (.electricityConsumptionUnit(let l), .electricityConsumptionUnit(let r)): return l == r
      case (.speedDistanceUnit(let l), .speedDistanceUnit(let r)): return l == r
      case (.speedUnit(let l), .speedUnit(let r)): return l == r
      case (.distanceUnit(let l), .distanceUnit(let r)): return l == r
      case (.temperatureUnit(let l), .temperatureUnit(let r)): return l == r
      case (.pressureUnit(let l), .pressureUnit(let r)): return l == r
      case (.ratioUnit(let l), .ratioUnit(let r)): return l == r
      case (.clockHourUnit(let l), .clockHourUnit(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  enum OneOf_AttributeType: Equatable {
    case intValue(Int64)
    case boolValue(Bool)
    case stringValue(String)
    case doubleValue(Double)
    case nilValue(Bool)
    case unsupportedValue(String)
    case temperaturePointsValue(Proto_TemperaturePointsValue)
    case weekdayTariffValue(Proto_WeekdayTariffValue)
    case weekendTariffValue(Proto_WeekendTariffValue)
    case stateOfChargeProfileValue(Proto_StateOfChargeProfileValue)
    case weeklySettingsHeadUnitValue(Proto_WeeklySettingsHeadUnitValue)
    case speedAlertConfigurationValue(Proto_SpeedAlertConfigurationValue)
    case ecoHistogramValue(Proto_EcoHistogramValue)

  #if !swift(>=4.1)
    static func ==(lhs: Proto_VehicleAttributeStatus.OneOf_AttributeType, rhs: Proto_VehicleAttributeStatus.OneOf_AttributeType) -> Bool {
      switch (lhs, rhs) {
      case (.intValue(let l), .intValue(let r)): return l == r
      case (.boolValue(let l), .boolValue(let r)): return l == r
      case (.stringValue(let l), .stringValue(let r)): return l == r
      case (.doubleValue(let l), .doubleValue(let r)): return l == r
      case (.nilValue(let l), .nilValue(let r)): return l == r
      case (.unsupportedValue(let l), .unsupportedValue(let r)): return l == r
      case (.temperaturePointsValue(let l), .temperaturePointsValue(let r)): return l == r
      case (.weekdayTariffValue(let l), .weekdayTariffValue(let r)): return l == r
      case (.weekendTariffValue(let l), .weekendTariffValue(let r)): return l == r
      case (.stateOfChargeProfileValue(let l), .stateOfChargeProfileValue(let r)): return l == r
      case (.weeklySettingsHeadUnitValue(let l), .weeklySettingsHeadUnitValue(let r)): return l == r
      case (.speedAlertConfigurationValue(let l), .speedAlertConfigurationValue(let r)): return l == r
      case (.ecoHistogramValue(let l), .ecoHistogramValue(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  enum CombustionConsumptionUnit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedCombustionConsumptionUnit // = 0

    /// Liter per 100 km
    case literPer100Km // = 1

    /// Kilometers per liter
    case kmPerLiter // = 2

    /// Miles Per imperial gallon
    case mpgUk // = 3

    /// Miles Per US gallon
    case mpgUs // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedCombustionConsumptionUnit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedCombustionConsumptionUnit
      case 1: self = .literPer100Km
      case 2: self = .kmPerLiter
      case 3: self = .mpgUk
      case 4: self = .mpgUs
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedCombustionConsumptionUnit: return 0
      case .literPer100Km: return 1
      case .kmPerLiter: return 2
      case .mpgUk: return 3
      case .mpgUs: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum ElectricityConsumptionUnit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedElectricityConsumptionUnit // = 0

    /// kWh per 100 km
    case kwhPer100Km // = 1

    /// Kilometers per kWh
    case kmPerKwh // = 2

    /// kWh per 100 miles
    case kwhPer100Mi // = 3

    /// miles per kWh
    case mPerKwh // = 4

    /// Miles per gallon gasoline equivalent
    case mpge // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedElectricityConsumptionUnit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedElectricityConsumptionUnit
      case 1: self = .kwhPer100Km
      case 2: self = .kmPerKwh
      case 3: self = .kwhPer100Mi
      case 4: self = .mPerKwh
      case 5: self = .mpge
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedElectricityConsumptionUnit: return 0
      case .kwhPer100Km: return 1
      case .kmPerKwh: return 2
      case .kwhPer100Mi: return 3
      case .mPerKwh: return 4
      case .mpge: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum GasConsumptionUnit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedGasConsumptionUnit // = 0

    /// kG per 100 km
    case kgPer100Km // = 1

    /// km per kg
    case kmPerKg // = 2

    /// miles per kg
    case mPerKg // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedGasConsumptionUnit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedGasConsumptionUnit
      case 1: self = .kgPer100Km
      case 2: self = .kmPerKg
      case 3: self = .mPerKg
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedGasConsumptionUnit: return 0
      case .kgPer100Km: return 1
      case .kmPerKg: return 2
      case .mPerKg: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum SpeedDistanceUnit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedSpeedDistanceUnit // = 0

    /// km/h, distance unit: km
    case kmPerH // = 1

    /// mph, distance unit: miles
    case mPerH // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedSpeedDistanceUnit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedSpeedDistanceUnit
      case 1: self = .kmPerH
      case 2: self = .mPerH
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedSpeedDistanceUnit: return 0
      case .kmPerH: return 1
      case .mPerH: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum SpeedUnit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedSpeedUnit // = 0

    /// kilometers per hour
    case kmPerHour // = 1

    /// miles per hour
    case mPerHour // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedSpeedUnit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedSpeedUnit
      case 1: self = .kmPerHour
      case 2: self = .mPerHour
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedSpeedUnit: return 0
      case .kmPerHour: return 1
      case .mPerHour: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum DistanceUnit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedDistanceUnit // = 0
    case kilometers // = 1
    case miles // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedDistanceUnit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedDistanceUnit
      case 1: self = .kilometers
      case 2: self = .miles
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedDistanceUnit: return 0
      case .kilometers: return 1
      case .miles: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum TemperatureUnit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedTemperatureUnit // = 0
    case celsius // = 1
    case fahrenheit // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedTemperatureUnit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedTemperatureUnit
      case 1: self = .celsius
      case 2: self = .fahrenheit
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedTemperatureUnit: return 0
      case .celsius: return 1
      case .fahrenheit: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum PressureUnit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedPressureUnit // = 0
    case kpa // = 1
    case bar // = 2

    /// Pounds per square inch
    case psi // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedPressureUnit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedPressureUnit
      case 1: self = .kpa
      case 2: self = .bar
      case 3: self = .psi
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedPressureUnit: return 0
      case .kpa: return 1
      case .bar: return 2
      case .psi: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum RatioUnit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedRatioUnit // = 0
    case percent // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedRatioUnit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedRatioUnit
      case 1: self = .percent
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedRatioUnit: return 0
      case .percent: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum ClockHourUnit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedClockHourUnit // = 0

    /// 12h (AM/PM)
    case t12H // = 1

    /// 24h
    case t24H // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedClockHourUnit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedClockHourUnit
      case 1: self = .t12H
      case 2: self = .t24H
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedClockHourUnit: return 0
      case .t12H: return 1
      case .t24H: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Proto_VehicleAttributeStatus.CombustionConsumptionUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAttributeStatus.CombustionConsumptionUnit] = [
    .unspecifiedCombustionConsumptionUnit,
    .literPer100Km,
    .kmPerLiter,
    .mpgUk,
    .mpgUs,
  ]
}

extension Proto_VehicleAttributeStatus.ElectricityConsumptionUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAttributeStatus.ElectricityConsumptionUnit] = [
    .unspecifiedElectricityConsumptionUnit,
    .kwhPer100Km,
    .kmPerKwh,
    .kwhPer100Mi,
    .mPerKwh,
    .mpge,
  ]
}

extension Proto_VehicleAttributeStatus.GasConsumptionUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAttributeStatus.GasConsumptionUnit] = [
    .unspecifiedGasConsumptionUnit,
    .kgPer100Km,
    .kmPerKg,
    .mPerKg,
  ]
}

extension Proto_VehicleAttributeStatus.SpeedDistanceUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAttributeStatus.SpeedDistanceUnit] = [
    .unspecifiedSpeedDistanceUnit,
    .kmPerH,
    .mPerH,
  ]
}

extension Proto_VehicleAttributeStatus.SpeedUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAttributeStatus.SpeedUnit] = [
    .unspecifiedSpeedUnit,
    .kmPerHour,
    .mPerHour,
  ]
}

extension Proto_VehicleAttributeStatus.DistanceUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAttributeStatus.DistanceUnit] = [
    .unspecifiedDistanceUnit,
    .kilometers,
    .miles,
  ]
}

extension Proto_VehicleAttributeStatus.TemperatureUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAttributeStatus.TemperatureUnit] = [
    .unspecifiedTemperatureUnit,
    .celsius,
    .fahrenheit,
  ]
}

extension Proto_VehicleAttributeStatus.PressureUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAttributeStatus.PressureUnit] = [
    .unspecifiedPressureUnit,
    .kpa,
    .bar,
    .psi,
  ]
}

extension Proto_VehicleAttributeStatus.RatioUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAttributeStatus.RatioUnit] = [
    .unspecifiedRatioUnit,
    .percent,
  ]
}

extension Proto_VehicleAttributeStatus.ClockHourUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Proto_VehicleAttributeStatus.ClockHourUnit] = [
    .unspecifiedClockHourUnit,
    .t12H,
    .t24H,
  ]
}

#endif  // swift(>=4.2)

struct Proto_EcoHistogramValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ecoHistogramBins: [Proto_EcoHistogramBin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_EcoHistogramBin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var interval: Double = 0

  var value: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_SpeedAlertConfigurationValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var speedAlertConfigurations: [Proto_SpeedAlertConfiguration] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_SpeedAlertConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unix timestamp in seconds
  var endTimestampInS: Int64 = 0

  /// Speed in kilometers per hour
  var thresholdInKph: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_WeeklySettingsHeadUnitValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Array with 0 to 21 tupels of day (0..6, 0 = Monday, 1= Tuesday, ..) and departure time in min since midnight (0..1439)
  var weeklySettings: [Proto_WeeklySetting] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_WeeklySetting {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var day: Int32 = 0

  var minutesSinceMidnight: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_TemperaturePointsValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Array with 1 to 5 tupels of zone (frontLeft, frontRight, frontCenter, rearRight, rearLeft, rearCenter, rear2center)
  /// and temperature in °C where 0 means maximum cooling (LOW) and 30 means maximum heating (HIGH)
  var temperaturePoints: [Proto_TemperaturePoint] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_TemperaturePoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var zone: String = String()

  var temperature: Double = 0

  var temperatureDisplayValue: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_WeekdayTariffValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of sampling points. Hint: Array will be empty in initial state. I. e.: rate and time will not be existent in initial state.
  var tariffs: [Proto_Tariff] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_WeekendTariffValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of sampling points. Hint: Array will be empty in initial state. I. e.: rate and time will not be existent in initial state.
  var tariffs: [Proto_Tariff] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_Tariff {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 33 - off-peak, 44 - mid-peak, 66 - on-peak
  var rate: Int32 = 0

  /// Seconds from midnight
  var time: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_StateOfChargeProfileValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Array with tupels of state of charge and time offset related to the timestamp of the attribute,
  /// e.g. [{t, soc}, {t, soc}, .., {t, soc}] (every soc with value range 0..100, every timestamp in seconds, UTC)
  var statesOfCharge: [Proto_StateOfCharge] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_StateOfCharge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// timestamp in seconds, UTC
  var timestampInS: Int64 = 0

  /// soc with value range 0..100
  var stateOfCharge: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Sending direction: App <- BFF <- AppTwin
struct Proto_VEPUpdatesByVIN {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNumber: Int32 = 0

  /// VIN -> Update
  var updates: Dictionary<String,Proto_VEPUpdate> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Sending direction: App <- BFF
struct Proto_DebugMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Represents a status response from the
/// VVA backend for a given VIN and CIAM ID.
struct Proto_VehicleStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vin: String = String()

  var attributes: Dictionary<String,Proto_VehicleAttributeStatus> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// message that is pushed from the vep status service
/// Sending direction: App <- BFF
struct Proto_PushMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trackingID: String {
    get {return _storage._trackingID}
    set {_uniqueStorage()._trackingID = newValue}
  }

  var msg: OneOf_Msg? {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  var vepUpdate: Proto_VEPUpdate {
    get {
      if case .vepUpdate(let v)? = _storage._msg {return v}
      return Proto_VEPUpdate()
    }
    set {_uniqueStorage()._msg = .vepUpdate(newValue)}
  }

  var vepUpdates: Proto_VEPUpdatesByVIN {
    get {
      if case .vepUpdates(let v)? = _storage._msg {return v}
      return Proto_VEPUpdatesByVIN()
    }
    set {_uniqueStorage()._msg = .vepUpdates(newValue)}
  }

  var debugMessage: Proto_DebugMessage {
    get {
      if case .debugMessage(let v)? = _storage._msg {return v}
      return Proto_DebugMessage()
    }
    set {_uniqueStorage()._msg = .debugMessage(newValue)}
  }

  var commandStatusUpdate: Proto_CommandStatusUpdate {
    get {
      if case .commandStatusUpdate(let v)? = _storage._msg {return v}
      return Proto_CommandStatusUpdate()
    }
    set {_uniqueStorage()._msg = .commandStatusUpdate(newValue)}
  }

  var commandStatusUpdates: Proto_CommandStatusUpdatesByVIN {
    get {
      if case .commandStatusUpdates(let v)? = _storage._msg {return v}
      return Proto_CommandStatusUpdatesByVIN()
    }
    set {_uniqueStorage()._msg = .commandStatusUpdates(newValue)}
  }

  var serviceStatusUpdates: Proto_ServiceStatusUpdatesByVIN {
    get {
      if case .serviceStatusUpdates(let v)? = _storage._msg {return v}
      return Proto_ServiceStatusUpdatesByVIN()
    }
    set {_uniqueStorage()._msg = .serviceStatusUpdates(newValue)}
  }

  var serviceStatusUpdate: Proto_ServiceStatusUpdate {
    get {
      if case .serviceStatusUpdate(let v)? = _storage._msg {return v}
      return Proto_ServiceStatusUpdate()
    }
    set {_uniqueStorage()._msg = .serviceStatusUpdate(newValue)}
  }

  var userDataUpdate: Proto_UserDataUpdate {
    get {
      if case .userDataUpdate(let v)? = _storage._msg {return v}
      return Proto_UserDataUpdate()
    }
    set {_uniqueStorage()._msg = .userDataUpdate(newValue)}
  }

  var userVehicleAuthChangedUpdate: Proto_UserVehicleAuthChangedUpdate {
    get {
      if case .userVehicleAuthChangedUpdate(let v)? = _storage._msg {return v}
      return Proto_UserVehicleAuthChangedUpdate()
    }
    set {_uniqueStorage()._msg = .userVehicleAuthChangedUpdate(newValue)}
  }

  var userPictureUpdate: Proto_UserPictureUpdate {
    get {
      if case .userPictureUpdate(let v)? = _storage._msg {return v}
      return Proto_UserPictureUpdate()
    }
    set {_uniqueStorage()._msg = .userPictureUpdate(newValue)}
  }

  var userPinUpdate: Proto_UserPINUpdate {
    get {
      if case .userPinUpdate(let v)? = _storage._msg {return v}
      return Proto_UserPINUpdate()
    }
    set {_uniqueStorage()._msg = .userPinUpdate(newValue)}
  }

  var vehicleUpdated: Proto_VehicleUpdated {
    get {
      if case .vehicleUpdated(let v)? = _storage._msg {return v}
      return Proto_VehicleUpdated()
    }
    set {_uniqueStorage()._msg = .vehicleUpdated(newValue)}
  }

  var preferredDealerChange: Proto_PreferredDealerChange {
    get {
      if case .preferredDealerChange(let v)? = _storage._msg {return v}
      return Proto_PreferredDealerChange()
    }
    set {_uniqueStorage()._msg = .preferredDealerChange(newValue)}
  }

  var apptwinCommandStatusUpdatesByVin: Proto_AppTwinCommandStatusUpdatesByVIN {
    get {
      if case .apptwinCommandStatusUpdatesByVin(let v)? = _storage._msg {return v}
      return Proto_AppTwinCommandStatusUpdatesByVIN()
    }
    set {_uniqueStorage()._msg = .apptwinCommandStatusUpdatesByVin(newValue)}
  }

  var apptwinPendingCommandRequest: Proto_AppTwinPendingCommandsRequest {
    get {
      if case .apptwinPendingCommandRequest(let v)? = _storage._msg {return v}
      return Proto_AppTwinPendingCommandsRequest()
    }
    set {_uniqueStorage()._msg = .apptwinPendingCommandRequest(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Msg: Equatable {
    case vepUpdate(Proto_VEPUpdate)
    case vepUpdates(Proto_VEPUpdatesByVIN)
    case debugMessage(Proto_DebugMessage)
    case commandStatusUpdate(Proto_CommandStatusUpdate)
    case commandStatusUpdates(Proto_CommandStatusUpdatesByVIN)
    case serviceStatusUpdates(Proto_ServiceStatusUpdatesByVIN)
    case serviceStatusUpdate(Proto_ServiceStatusUpdate)
    case userDataUpdate(Proto_UserDataUpdate)
    case userVehicleAuthChangedUpdate(Proto_UserVehicleAuthChangedUpdate)
    case userPictureUpdate(Proto_UserPictureUpdate)
    case userPinUpdate(Proto_UserPINUpdate)
    case vehicleUpdated(Proto_VehicleUpdated)
    case preferredDealerChange(Proto_PreferredDealerChange)
    case apptwinCommandStatusUpdatesByVin(Proto_AppTwinCommandStatusUpdatesByVIN)
    case apptwinPendingCommandRequest(Proto_AppTwinPendingCommandsRequest)

  #if !swift(>=4.1)
    static func ==(lhs: Proto_PushMessage.OneOf_Msg, rhs: Proto_PushMessage.OneOf_Msg) -> Bool {
      switch (lhs, rhs) {
      case (.vepUpdate(let l), .vepUpdate(let r)): return l == r
      case (.vepUpdates(let l), .vepUpdates(let r)): return l == r
      case (.debugMessage(let l), .debugMessage(let r)): return l == r
      case (.commandStatusUpdate(let l), .commandStatusUpdate(let r)): return l == r
      case (.commandStatusUpdates(let l), .commandStatusUpdates(let r)): return l == r
      case (.serviceStatusUpdates(let l), .serviceStatusUpdates(let r)): return l == r
      case (.serviceStatusUpdate(let l), .serviceStatusUpdate(let r)): return l == r
      case (.userDataUpdate(let l), .userDataUpdate(let r)): return l == r
      case (.userVehicleAuthChangedUpdate(let l), .userVehicleAuthChangedUpdate(let r)): return l == r
      case (.userPictureUpdate(let l), .userPictureUpdate(let r)): return l == r
      case (.userPinUpdate(let l), .userPinUpdate(let r)): return l == r
      case (.vehicleUpdated(let l), .vehicleUpdated(let r)): return l == r
      case (.preferredDealerChange(let l), .preferredDealerChange(let r)): return l == r
      case (.apptwinCommandStatusUpdatesByVin(let l), .apptwinCommandStatusUpdatesByVin(let r)): return l == r
      case (.apptwinPendingCommandRequest(let l), .apptwinPendingCommandRequest(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// message type to track an event, e.g. a user interaction with content
/// Sending direction: App -> BFF
struct Proto_TrackingEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// a unique id associated with this event
  var trackingID: String = String()

  /// the unix epoch time in nanoseconds when the event occurred
  var timestamp: Int64 = 0

  /// a unique identifier describing a single interaction or event
  var eventType: String = String()

  /// additional meta data describing the event
  var payload: Dictionary<String,Proto_PayloadValue> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_PayloadValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var msg: Proto_PayloadValue.OneOf_Msg? = nil

  var stringValue: String {
    get {
      if case .stringValue(let v)? = msg {return v}
      return String()
    }
    set {msg = .stringValue(newValue)}
  }

  var intValue: Int32 {
    get {
      if case .intValue(let v)? = msg {return v}
      return 0
    }
    set {msg = .intValue(newValue)}
  }

  var boolValue: Bool {
    get {
      if case .boolValue(let v)? = msg {return v}
      return false
    }
    set {msg = .boolValue(newValue)}
  }

  var doubleValue: Double {
    get {
      if case .doubleValue(let v)? = msg {return v}
      return 0
    }
    set {msg = .doubleValue(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Msg: Equatable {
    case stringValue(String)
    case intValue(Int32)
    case boolValue(Bool)
    case doubleValue(Double)

  #if !swift(>=4.1)
    static func ==(lhs: Proto_PayloadValue.OneOf_Msg, rhs: Proto_PayloadValue.OneOf_Msg) -> Bool {
      switch (lhs, rhs) {
      case (.stringValue(let l), .stringValue(let r)): return l == r
      case (.intValue(let l), .intValue(let r)): return l == r
      case (.boolValue(let l), .boolValue(let r)): return l == r
      case (.doubleValue(let l), .doubleValue(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// acknowledge that the VEP updates of up to `sequenceNumber` have been received
/// Sending direction: App -> BFF -> AppTwin
struct Proto_AcknowledgeVEPRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNumber: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// acknowledge that the VEP updates by vin of up to `sequenceNumber` have been received
/// Sending direction: App -> BFF -> AppTwin
/// This message should replace the AcknowledgeVEPRequest
struct Proto_AcknowledgeVEPUpdatesByVIN {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNumber: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// the client can optionally send this message to reconfigure the ping interval
/// Sending direction: App -> BFF
struct Proto_ConfigurePingInterval {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pingTimeMillis: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_AcknowledgeVehicleUpdated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNumber: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_AcknowledgePreferredDealerChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNumber: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_VehicleUpdated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNumber: Int32 = 0

  var ciamID: String = String()

  var vin: String = String()

  /// When was the event emitted (milliseconds in Unix time)
  var emitTimestampInMs: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto_PreferredDealerChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNumber: Int32 = 0

  var ciamID: String = String()

  var vin: String = String()

  /// When was the event emitted (milliseconds in Unix time)
  var emitTimestampInMs: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_AttributeStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VALUE_VALID"),
    1: .same(proto: "VALUE_NOT_RECEIVED"),
    3: .same(proto: "VALUE_INVALID"),
    4: .same(proto: "VALUE_NOT_AVAILABLE"),
  ]
}

extension Proto_VEPUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VEPUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sequence_number"),
    2: .same(proto: "vin"),
    10: .standard(proto: "emit_timestamp"),
    14: .standard(proto: "emit_timestamp_in_ms"),
    11: .same(proto: "attributes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.sequenceNumber)
      case 2: try decoder.decodeSingularStringField(value: &self.vin)
      case 10: try decoder.decodeSingularInt64Field(value: &self.emitTimestamp)
      case 11: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Proto_VehicleAttributeStatus>.self, value: &self.attributes)
      case 14: try decoder.decodeSingularInt64Field(value: &self.emitTimestampInMs)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.sequenceNumber, fieldNumber: 1)
    }
    if !self.vin.isEmpty {
      try visitor.visitSingularStringField(value: self.vin, fieldNumber: 2)
    }
    if self.emitTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.emitTimestamp, fieldNumber: 10)
    }
    if !self.attributes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Proto_VehicleAttributeStatus>.self, value: self.attributes, fieldNumber: 11)
    }
    if self.emitTimestampInMs != 0 {
      try visitor.visitSingularInt64Field(value: self.emitTimestampInMs, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_VEPUpdate, rhs: Proto_VEPUpdate) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.vin != rhs.vin {return false}
    if lhs.emitTimestamp != rhs.emitTimestamp {return false}
    if lhs.emitTimestampInMs != rhs.emitTimestampInMs {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_VehicleAttributeStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VehicleAttributeStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    10: .standard(proto: "timestamp_in_ms"),
    2: .same(proto: "changed"),
    3: .same(proto: "status"),
    11: .standard(proto: "display_value"),
    12: .standard(proto: "combustion_consumption_unit"),
    13: .standard(proto: "gas_consumption_unit"),
    14: .standard(proto: "electricity_consumption_unit"),
    15: .standard(proto: "speed_distance_unit"),
    25: .standard(proto: "speed_unit"),
    26: .standard(proto: "distance_unit"),
    16: .standard(proto: "temperature_unit"),
    17: .standard(proto: "pressure_unit"),
    18: .standard(proto: "ratio_unit"),
    19: .standard(proto: "clock_hour_unit"),
    4: .standard(proto: "int_value"),
    5: .standard(proto: "bool_value"),
    6: .standard(proto: "string_value"),
    7: .standard(proto: "double_value"),
    8: .standard(proto: "nil_value"),
    9: .standard(proto: "unsupported_value"),
    20: .standard(proto: "temperature_points_value"),
    21: .standard(proto: "weekday_tariff_value"),
    22: .standard(proto: "weekend_tariff_value"),
    23: .standard(proto: "state_of_charge_profile_value"),
    24: .standard(proto: "weekly_settings_head_unit_value"),
    27: .standard(proto: "speed_alert_configuration_value"),
    28: .standard(proto: "eco_histogram_value"),
  ]

  fileprivate class _StorageClass {
    var _timestamp: Int64 = 0
    var _timestampInMs: Int64 = 0
    var _changed: Bool = false
    var _status: Int32 = 0
    var _displayValue: String = String()
    var _displayUnit: Proto_VehicleAttributeStatus.OneOf_DisplayUnit?
    var _attributeType: Proto_VehicleAttributeStatus.OneOf_AttributeType?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timestamp = source._timestamp
      _timestampInMs = source._timestampInMs
      _changed = source._changed
      _status = source._status
      _displayValue = source._displayValue
      _displayUnit = source._displayUnit
      _attributeType = source._attributeType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._timestamp)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._changed)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 4:
          if _storage._attributeType != nil {try decoder.handleConflictingOneOf()}
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {_storage._attributeType = .intValue(v)}
        case 5:
          if _storage._attributeType != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._attributeType = .boolValue(v)}
        case 6:
          if _storage._attributeType != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._attributeType = .stringValue(v)}
        case 7:
          if _storage._attributeType != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._attributeType = .doubleValue(v)}
        case 8:
          if _storage._attributeType != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._attributeType = .nilValue(v)}
        case 9:
          if _storage._attributeType != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._attributeType = .unsupportedValue(v)}
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._timestampInMs)
        case 11: try decoder.decodeSingularStringField(value: &_storage._displayValue)
        case 12:
          if _storage._displayUnit != nil {try decoder.handleConflictingOneOf()}
          var v: Proto_VehicleAttributeStatus.CombustionConsumptionUnit?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._displayUnit = .combustionConsumptionUnit(v)}
        case 13:
          if _storage._displayUnit != nil {try decoder.handleConflictingOneOf()}
          var v: Proto_VehicleAttributeStatus.GasConsumptionUnit?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._displayUnit = .gasConsumptionUnit(v)}
        case 14:
          if _storage._displayUnit != nil {try decoder.handleConflictingOneOf()}
          var v: Proto_VehicleAttributeStatus.ElectricityConsumptionUnit?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._displayUnit = .electricityConsumptionUnit(v)}
        case 15:
          if _storage._displayUnit != nil {try decoder.handleConflictingOneOf()}
          var v: Proto_VehicleAttributeStatus.SpeedDistanceUnit?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._displayUnit = .speedDistanceUnit(v)}
        case 16:
          if _storage._displayUnit != nil {try decoder.handleConflictingOneOf()}
          var v: Proto_VehicleAttributeStatus.TemperatureUnit?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._displayUnit = .temperatureUnit(v)}
        case 17:
          if _storage._displayUnit != nil {try decoder.handleConflictingOneOf()}
          var v: Proto_VehicleAttributeStatus.PressureUnit?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._displayUnit = .pressureUnit(v)}
        case 18:
          if _storage._displayUnit != nil {try decoder.handleConflictingOneOf()}
          var v: Proto_VehicleAttributeStatus.RatioUnit?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._displayUnit = .ratioUnit(v)}
        case 19:
          if _storage._displayUnit != nil {try decoder.handleConflictingOneOf()}
          var v: Proto_VehicleAttributeStatus.ClockHourUnit?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._displayUnit = .clockHourUnit(v)}
        case 20:
          var v: Proto_TemperaturePointsValue?
          if let current = _storage._attributeType {
            try decoder.handleConflictingOneOf()
            if case .temperaturePointsValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._attributeType = .temperaturePointsValue(v)}
        case 21:
          var v: Proto_WeekdayTariffValue?
          if let current = _storage._attributeType {
            try decoder.handleConflictingOneOf()
            if case .weekdayTariffValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._attributeType = .weekdayTariffValue(v)}
        case 22:
          var v: Proto_WeekendTariffValue?
          if let current = _storage._attributeType {
            try decoder.handleConflictingOneOf()
            if case .weekendTariffValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._attributeType = .weekendTariffValue(v)}
        case 23:
          var v: Proto_StateOfChargeProfileValue?
          if let current = _storage._attributeType {
            try decoder.handleConflictingOneOf()
            if case .stateOfChargeProfileValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._attributeType = .stateOfChargeProfileValue(v)}
        case 24:
          var v: Proto_WeeklySettingsHeadUnitValue?
          if let current = _storage._attributeType {
            try decoder.handleConflictingOneOf()
            if case .weeklySettingsHeadUnitValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._attributeType = .weeklySettingsHeadUnitValue(v)}
        case 25:
          if _storage._displayUnit != nil {try decoder.handleConflictingOneOf()}
          var v: Proto_VehicleAttributeStatus.SpeedUnit?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._displayUnit = .speedUnit(v)}
        case 26:
          if _storage._displayUnit != nil {try decoder.handleConflictingOneOf()}
          var v: Proto_VehicleAttributeStatus.DistanceUnit?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._displayUnit = .distanceUnit(v)}
        case 27:
          var v: Proto_SpeedAlertConfigurationValue?
          if let current = _storage._attributeType {
            try decoder.handleConflictingOneOf()
            if case .speedAlertConfigurationValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._attributeType = .speedAlertConfigurationValue(v)}
        case 28:
          var v: Proto_EcoHistogramValue?
          if let current = _storage._attributeType {
            try decoder.handleConflictingOneOf()
            if case .ecoHistogramValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._attributeType = .ecoHistogramValue(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestamp, fieldNumber: 1)
      }
      if _storage._changed != false {
        try visitor.visitSingularBoolField(value: _storage._changed, fieldNumber: 2)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 3)
      }
      switch _storage._attributeType {
      case .intValue(let v)?:
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
      case .boolValue(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      case .stringValue(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      case .doubleValue(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
      case .nilValue(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      case .unsupportedValue(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      case nil: break
      default: break
      }
      if _storage._timestampInMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestampInMs, fieldNumber: 10)
      }
      if !_storage._displayValue.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayValue, fieldNumber: 11)
      }
      switch _storage._displayUnit {
      case .combustionConsumptionUnit(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 12)
      case .gasConsumptionUnit(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
      case .electricityConsumptionUnit(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 14)
      case .speedDistanceUnit(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 15)
      case .temperatureUnit(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 16)
      case .pressureUnit(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
      case .ratioUnit(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 18)
      case .clockHourUnit(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 19)
      case nil: break
      default: break
      }
      switch _storage._attributeType {
      case .temperaturePointsValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      case .weekdayTariffValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      case .weekendTariffValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      case .stateOfChargeProfileValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      case .weeklySettingsHeadUnitValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      case nil: break
      default: break
      }
      switch _storage._displayUnit {
      case .speedUnit(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 25)
      case .distanceUnit(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 26)
      case nil: break
      default: break
      }
      switch _storage._attributeType {
      case .speedAlertConfigurationValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      case .ecoHistogramValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      case nil: break
      default: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_VehicleAttributeStatus, rhs: Proto_VehicleAttributeStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._timestampInMs != rhs_storage._timestampInMs {return false}
        if _storage._changed != rhs_storage._changed {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._displayValue != rhs_storage._displayValue {return false}
        if _storage._displayUnit != rhs_storage._displayUnit {return false}
        if _storage._attributeType != rhs_storage._attributeType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_VehicleAttributeStatus.CombustionConsumptionUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_COMBUSTION_CONSUMPTION_UNIT"),
    1: .same(proto: "LITER_PER_100KM"),
    2: .same(proto: "KM_PER_LITER"),
    3: .same(proto: "MPG_UK"),
    4: .same(proto: "MPG_US"),
  ]
}

extension Proto_VehicleAttributeStatus.ElectricityConsumptionUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_ELECTRICITY_CONSUMPTION_UNIT"),
    1: .same(proto: "KWH_PER_100KM"),
    2: .same(proto: "KM_PER_KWH"),
    3: .same(proto: "KWH_PER_100MI"),
    4: .same(proto: "M_PER_KWH"),
    5: .same(proto: "MPGE"),
  ]
}

extension Proto_VehicleAttributeStatus.GasConsumptionUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_GAS_CONSUMPTION_UNIT"),
    1: .same(proto: "KG_PER_100KM"),
    2: .same(proto: "KM_PER_KG"),
    3: .same(proto: "M_PER_KG"),
  ]
}

extension Proto_VehicleAttributeStatus.SpeedDistanceUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_SPEED_DISTANCE_UNIT"),
    1: .same(proto: "KM_PER_H"),
    2: .same(proto: "M_PER_H"),
  ]
}

extension Proto_VehicleAttributeStatus.SpeedUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_SPEED_UNIT"),
    1: .same(proto: "KM_PER_HOUR"),
    2: .same(proto: "M_PER_HOUR"),
  ]
}

extension Proto_VehicleAttributeStatus.DistanceUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_DISTANCE_UNIT"),
    1: .same(proto: "KILOMETERS"),
    2: .same(proto: "MILES"),
  ]
}

extension Proto_VehicleAttributeStatus.TemperatureUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_TEMPERATURE_UNIT"),
    1: .same(proto: "CELSIUS"),
    2: .same(proto: "FAHRENHEIT"),
  ]
}

extension Proto_VehicleAttributeStatus.PressureUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_PRESSURE_UNIT"),
    1: .same(proto: "KPA"),
    2: .same(proto: "BAR"),
    3: .same(proto: "PSI"),
  ]
}

extension Proto_VehicleAttributeStatus.RatioUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_RATIO_UNIT"),
    1: .same(proto: "PERCENT"),
  ]
}

extension Proto_VehicleAttributeStatus.ClockHourUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_CLOCK_HOUR_UNIT"),
    1: .same(proto: "T12H"),
    2: .same(proto: "T24H"),
  ]
}

extension Proto_EcoHistogramValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EcoHistogramValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "eco_histogram_bins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.ecoHistogramBins)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ecoHistogramBins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ecoHistogramBins, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_EcoHistogramValue, rhs: Proto_EcoHistogramValue) -> Bool {
    if lhs.ecoHistogramBins != rhs.ecoHistogramBins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_EcoHistogramBin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EcoHistogramBin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "interval"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.interval)
      case 2: try decoder.decodeSingularDoubleField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.interval != 0 {
      try visitor.visitSingularDoubleField(value: self.interval, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_EcoHistogramBin, rhs: Proto_EcoHistogramBin) -> Bool {
    if lhs.interval != rhs.interval {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_SpeedAlertConfigurationValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpeedAlertConfigurationValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "speed_alert_configurations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.speedAlertConfigurations)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.speedAlertConfigurations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.speedAlertConfigurations, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_SpeedAlertConfigurationValue, rhs: Proto_SpeedAlertConfigurationValue) -> Bool {
    if lhs.speedAlertConfigurations != rhs.speedAlertConfigurations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_SpeedAlertConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpeedAlertConfiguration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "end_timestamp_in_s"),
    2: .standard(proto: "threshold_in_kph"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.endTimestampInS)
      case 2: try decoder.decodeSingularInt32Field(value: &self.thresholdInKph)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.endTimestampInS != 0 {
      try visitor.visitSingularInt64Field(value: self.endTimestampInS, fieldNumber: 1)
    }
    if self.thresholdInKph != 0 {
      try visitor.visitSingularInt32Field(value: self.thresholdInKph, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_SpeedAlertConfiguration, rhs: Proto_SpeedAlertConfiguration) -> Bool {
    if lhs.endTimestampInS != rhs.endTimestampInS {return false}
    if lhs.thresholdInKph != rhs.thresholdInKph {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_WeeklySettingsHeadUnitValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeeklySettingsHeadUnitValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "weekly_settings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.weeklySettings)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.weeklySettings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.weeklySettings, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_WeeklySettingsHeadUnitValue, rhs: Proto_WeeklySettingsHeadUnitValue) -> Bool {
    if lhs.weeklySettings != rhs.weeklySettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_WeeklySetting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeeklySetting"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "day"),
    2: .standard(proto: "minutes_since_midnight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.day)
      case 2: try decoder.decodeSingularInt32Field(value: &self.minutesSinceMidnight)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.day != 0 {
      try visitor.visitSingularInt32Field(value: self.day, fieldNumber: 1)
    }
    if self.minutesSinceMidnight != 0 {
      try visitor.visitSingularInt32Field(value: self.minutesSinceMidnight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_WeeklySetting, rhs: Proto_WeeklySetting) -> Bool {
    if lhs.day != rhs.day {return false}
    if lhs.minutesSinceMidnight != rhs.minutesSinceMidnight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_TemperaturePointsValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TemperaturePointsValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "temperature_points"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.temperaturePoints)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.temperaturePoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.temperaturePoints, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_TemperaturePointsValue, rhs: Proto_TemperaturePointsValue) -> Bool {
    if lhs.temperaturePoints != rhs.temperaturePoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_TemperaturePoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TemperaturePoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "zone"),
    2: .same(proto: "temperature"),
    3: .standard(proto: "temperature_display_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.zone)
      case 2: try decoder.decodeSingularDoubleField(value: &self.temperature)
      case 3: try decoder.decodeSingularStringField(value: &self.temperatureDisplayValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.zone.isEmpty {
      try visitor.visitSingularStringField(value: self.zone, fieldNumber: 1)
    }
    if self.temperature != 0 {
      try visitor.visitSingularDoubleField(value: self.temperature, fieldNumber: 2)
    }
    if !self.temperatureDisplayValue.isEmpty {
      try visitor.visitSingularStringField(value: self.temperatureDisplayValue, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_TemperaturePoint, rhs: Proto_TemperaturePoint) -> Bool {
    if lhs.zone != rhs.zone {return false}
    if lhs.temperature != rhs.temperature {return false}
    if lhs.temperatureDisplayValue != rhs.temperatureDisplayValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_WeekdayTariffValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeekdayTariffValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tariffs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.tariffs)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tariffs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tariffs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_WeekdayTariffValue, rhs: Proto_WeekdayTariffValue) -> Bool {
    if lhs.tariffs != rhs.tariffs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_WeekendTariffValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeekendTariffValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tariffs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.tariffs)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tariffs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tariffs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_WeekendTariffValue, rhs: Proto_WeekendTariffValue) -> Bool {
    if lhs.tariffs != rhs.tariffs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Tariff: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Tariff"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rate"),
    2: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.rate)
      case 2: try decoder.decodeSingularInt32Field(value: &self.time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rate != 0 {
      try visitor.visitSingularInt32Field(value: self.rate, fieldNumber: 1)
    }
    if self.time != 0 {
      try visitor.visitSingularInt32Field(value: self.time, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_Tariff, rhs: Proto_Tariff) -> Bool {
    if lhs.rate != rhs.rate {return false}
    if lhs.time != rhs.time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_StateOfChargeProfileValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StateOfChargeProfileValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "states_of_charge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.statesOfCharge)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.statesOfCharge.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.statesOfCharge, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_StateOfChargeProfileValue, rhs: Proto_StateOfChargeProfileValue) -> Bool {
    if lhs.statesOfCharge != rhs.statesOfCharge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_StateOfCharge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StateOfCharge"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timestamp_in_s"),
    2: .standard(proto: "state_of_charge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.timestampInS)
      case 2: try decoder.decodeSingularInt32Field(value: &self.stateOfCharge)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestampInS != 0 {
      try visitor.visitSingularInt64Field(value: self.timestampInS, fieldNumber: 1)
    }
    if self.stateOfCharge != 0 {
      try visitor.visitSingularInt32Field(value: self.stateOfCharge, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_StateOfCharge, rhs: Proto_StateOfCharge) -> Bool {
    if lhs.timestampInS != rhs.timestampInS {return false}
    if lhs.stateOfCharge != rhs.stateOfCharge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_VEPUpdatesByVIN: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VEPUpdatesByVIN"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "sequence_number"),
    1: .same(proto: "updates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Proto_VEPUpdate>.self, value: &self.updates)
      case 2: try decoder.decodeSingularInt32Field(value: &self.sequenceNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.updates.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Proto_VEPUpdate>.self, value: self.updates, fieldNumber: 1)
    }
    if self.sequenceNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.sequenceNumber, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_VEPUpdatesByVIN, rhs: Proto_VEPUpdatesByVIN) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.updates != rhs.updates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_DebugMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DebugMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_DebugMessage, rhs: Proto_DebugMessage) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_VehicleStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VehicleStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vin"),
    2: .same(proto: "attributes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.vin)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Proto_VehicleAttributeStatus>.self, value: &self.attributes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vin.isEmpty {
      try visitor.visitSingularStringField(value: self.vin, fieldNumber: 1)
    }
    if !self.attributes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Proto_VehicleAttributeStatus>.self, value: self.attributes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_VehicleStatus, rhs: Proto_VehicleStatus) -> Bool {
    if lhs.vin != rhs.vin {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PushMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PushMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .standard(proto: "tracking_id"),
    1: .same(proto: "vepUpdate"),
    2: .same(proto: "vepUpdates"),
    3: .same(proto: "debugMessage"),
    7: .standard(proto: "command_status_update"),
    8: .standard(proto: "command_status_updates"),
    9: .standard(proto: "service_status_updates"),
    13: .standard(proto: "service_status_update"),
    10: .standard(proto: "user_data_update"),
    14: .standard(proto: "user_vehicle_auth_changed_update"),
    11: .standard(proto: "user_picture_update"),
    12: .standard(proto: "user_pin_update"),
    15: .standard(proto: "vehicle_updated"),
    16: .standard(proto: "preferred_dealer_change"),
    17: .standard(proto: "apptwin_command_status_updates_by_vin"),
    18: .standard(proto: "apptwin_pending_command_request"),
  ]

  fileprivate class _StorageClass {
    var _trackingID: String = String()
    var _msg: Proto_PushMessage.OneOf_Msg?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _trackingID = source._trackingID
      _msg = source._msg
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Proto_VEPUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .vepUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .vepUpdate(v)}
        case 2:
          var v: Proto_VEPUpdatesByVIN?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .vepUpdates(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .vepUpdates(v)}
        case 3:
          var v: Proto_DebugMessage?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .debugMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .debugMessage(v)}
        case 5: try decoder.decodeSingularStringField(value: &_storage._trackingID)
        case 7:
          var v: Proto_CommandStatusUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .commandStatusUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .commandStatusUpdate(v)}
        case 8:
          var v: Proto_CommandStatusUpdatesByVIN?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .commandStatusUpdates(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .commandStatusUpdates(v)}
        case 9:
          var v: Proto_ServiceStatusUpdatesByVIN?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .serviceStatusUpdates(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .serviceStatusUpdates(v)}
        case 10:
          var v: Proto_UserDataUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .userDataUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .userDataUpdate(v)}
        case 11:
          var v: Proto_UserPictureUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .userPictureUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .userPictureUpdate(v)}
        case 12:
          var v: Proto_UserPINUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .userPinUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .userPinUpdate(v)}
        case 13:
          var v: Proto_ServiceStatusUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .serviceStatusUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .serviceStatusUpdate(v)}
        case 14:
          var v: Proto_UserVehicleAuthChangedUpdate?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .userVehicleAuthChangedUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .userVehicleAuthChangedUpdate(v)}
        case 15:
          var v: Proto_VehicleUpdated?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .vehicleUpdated(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .vehicleUpdated(v)}
        case 16:
          var v: Proto_PreferredDealerChange?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .preferredDealerChange(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .preferredDealerChange(v)}
        case 17:
          var v: Proto_AppTwinCommandStatusUpdatesByVIN?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .apptwinCommandStatusUpdatesByVin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .apptwinCommandStatusUpdatesByVin(v)}
        case 18:
          var v: Proto_AppTwinPendingCommandsRequest?
          if let current = _storage._msg {
            try decoder.handleConflictingOneOf()
            if case .apptwinPendingCommandRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msg = .apptwinPendingCommandRequest(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._msg {
      case .vepUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .vepUpdates(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .debugMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      default: break
      }
      if !_storage._trackingID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._trackingID, fieldNumber: 5)
      }
      switch _storage._msg {
      case .commandStatusUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .commandStatusUpdates(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .serviceStatusUpdates(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .userDataUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .userPictureUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .userPinUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .serviceStatusUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .userVehicleAuthChangedUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .vehicleUpdated(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .preferredDealerChange(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case .apptwinCommandStatusUpdatesByVin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      case .apptwinPendingCommandRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      case nil: break
      default: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_PushMessage, rhs: Proto_PushMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._trackingID != rhs_storage._trackingID {return false}
        if _storage._msg != rhs_storage._msg {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_TrackingEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackingEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tracking_id"),
    2: .same(proto: "timestamp"),
    3: .standard(proto: "event_type"),
    4: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.trackingID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 3: try decoder.decodeSingularStringField(value: &self.eventType)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Proto_PayloadValue>.self, value: &self.payload)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trackingID.isEmpty {
      try visitor.visitSingularStringField(value: self.trackingID, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    if !self.eventType.isEmpty {
      try visitor.visitSingularStringField(value: self.eventType, fieldNumber: 3)
    }
    if !self.payload.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Proto_PayloadValue>.self, value: self.payload, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_TrackingEvent, rhs: Proto_TrackingEvent) -> Bool {
    if lhs.trackingID != rhs.trackingID {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.eventType != rhs.eventType {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PayloadValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PayloadValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "string_value"),
    2: .standard(proto: "int_value"),
    3: .standard(proto: "bool_value"),
    4: .standard(proto: "double_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.msg != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.msg = .stringValue(v)}
      case 2:
        if self.msg != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.msg = .intValue(v)}
      case 3:
        if self.msg != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.msg = .boolValue(v)}
      case 4:
        if self.msg != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.msg = .doubleValue(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.msg {
    case .stringValue(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    case .intValue(let v)?:
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    case .boolValue(let v)?:
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    case .doubleValue(let v)?:
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_PayloadValue, rhs: Proto_PayloadValue) -> Bool {
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AcknowledgeVEPRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AcknowledgeVEPRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sequence_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.sequenceNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.sequenceNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_AcknowledgeVEPRequest, rhs: Proto_AcknowledgeVEPRequest) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AcknowledgeVEPUpdatesByVIN: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AcknowledgeVEPUpdatesByVIN"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sequence_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.sequenceNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.sequenceNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_AcknowledgeVEPUpdatesByVIN, rhs: Proto_AcknowledgeVEPUpdatesByVIN) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ConfigurePingInterval: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigurePingInterval"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ping_time_millis"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.pingTimeMillis)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pingTimeMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.pingTimeMillis, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_ConfigurePingInterval, rhs: Proto_ConfigurePingInterval) -> Bool {
    if lhs.pingTimeMillis != rhs.pingTimeMillis {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AcknowledgeVehicleUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AcknowledgeVehicleUpdated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sequence_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.sequenceNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.sequenceNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_AcknowledgeVehicleUpdated, rhs: Proto_AcknowledgeVehicleUpdated) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AcknowledgePreferredDealerChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AcknowledgePreferredDealerChange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sequence_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.sequenceNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.sequenceNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_AcknowledgePreferredDealerChange, rhs: Proto_AcknowledgePreferredDealerChange) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_VehicleUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VehicleUpdated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sequence_number"),
    2: .standard(proto: "ciam_id"),
    3: .same(proto: "vin"),
    10: .standard(proto: "emit_timestamp_in_ms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.sequenceNumber)
      case 2: try decoder.decodeSingularStringField(value: &self.ciamID)
      case 3: try decoder.decodeSingularStringField(value: &self.vin)
      case 10: try decoder.decodeSingularInt64Field(value: &self.emitTimestampInMs)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.sequenceNumber, fieldNumber: 1)
    }
    if !self.ciamID.isEmpty {
      try visitor.visitSingularStringField(value: self.ciamID, fieldNumber: 2)
    }
    if !self.vin.isEmpty {
      try visitor.visitSingularStringField(value: self.vin, fieldNumber: 3)
    }
    if self.emitTimestampInMs != 0 {
      try visitor.visitSingularInt64Field(value: self.emitTimestampInMs, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_VehicleUpdated, rhs: Proto_VehicleUpdated) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.ciamID != rhs.ciamID {return false}
    if lhs.vin != rhs.vin {return false}
    if lhs.emitTimestampInMs != rhs.emitTimestampInMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PreferredDealerChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PreferredDealerChange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sequence_number"),
    2: .standard(proto: "ciam_id"),
    3: .same(proto: "vin"),
    10: .standard(proto: "emit_timestamp_in_ms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.sequenceNumber)
      case 2: try decoder.decodeSingularStringField(value: &self.ciamID)
      case 3: try decoder.decodeSingularStringField(value: &self.vin)
      case 10: try decoder.decodeSingularInt64Field(value: &self.emitTimestampInMs)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.sequenceNumber, fieldNumber: 1)
    }
    if !self.ciamID.isEmpty {
      try visitor.visitSingularStringField(value: self.ciamID, fieldNumber: 2)
    }
    if !self.vin.isEmpty {
      try visitor.visitSingularStringField(value: self.vin, fieldNumber: 3)
    }
    if self.emitTimestampInMs != 0 {
      try visitor.visitSingularInt64Field(value: self.emitTimestampInMs, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_PreferredDealerChange, rhs: Proto_PreferredDealerChange) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.ciamID != rhs.ciamID {return false}
    if lhs.vin != rhs.vin {return false}
    if lhs.emitTimestampInMs != rhs.emitTimestampInMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
