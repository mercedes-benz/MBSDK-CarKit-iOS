// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: eventpush.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Proto_EventPushCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vin: String = String()

  var state: Proto_VVA.CommandState = .unknownCommandState

  var condition: Proto_VVA.CommandCondition = .unknwonCommandCondition

  var type: Proto_ACP.CommandType = .unknowncommandtype

  var processID: Int64 = 0

  var trackingID: String = String()

  var correlationID: String = String()

  var errorCodes: [Int32] = []

  var guid: String = String()

  var timestampInS: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_EventPushCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventPushCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vin"),
    2: .unique(proto: "state", json: "acpState"),
    3: .unique(proto: "condition", json: "acpCondition"),
    4: .unique(proto: "type", json: "acpCommandType"),
    5: .unique(proto: "process_id", json: "pid"),
    6: .standard(proto: "tracking_id"),
    7: .standard(proto: "correlation_id"),
    8: .standard(proto: "error_codes"),
    9: .same(proto: "guid"),
    10: .unique(proto: "timestamp_in_s", json: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.vin)
      case 2: try decoder.decodeSingularEnumField(value: &self.state)
      case 3: try decoder.decodeSingularEnumField(value: &self.condition)
      case 4: try decoder.decodeSingularEnumField(value: &self.type)
      case 5: try decoder.decodeSingularInt64Field(value: &self.processID)
      case 6: try decoder.decodeSingularStringField(value: &self.trackingID)
      case 7: try decoder.decodeSingularStringField(value: &self.correlationID)
      case 8: try decoder.decodeRepeatedInt32Field(value: &self.errorCodes)
      case 9: try decoder.decodeSingularStringField(value: &self.guid)
      case 10: try decoder.decodeSingularInt64Field(value: &self.timestampInS)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vin.isEmpty {
      try visitor.visitSingularStringField(value: self.vin, fieldNumber: 1)
    }
    if self.state != .unknownCommandState {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if self.condition != .unknwonCommandCondition {
      try visitor.visitSingularEnumField(value: self.condition, fieldNumber: 3)
    }
    if self.type != .unknowncommandtype {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    if self.processID != 0 {
      try visitor.visitSingularInt64Field(value: self.processID, fieldNumber: 5)
    }
    if !self.trackingID.isEmpty {
      try visitor.visitSingularStringField(value: self.trackingID, fieldNumber: 6)
    }
    if !self.correlationID.isEmpty {
      try visitor.visitSingularStringField(value: self.correlationID, fieldNumber: 7)
    }
    if !self.errorCodes.isEmpty {
      try visitor.visitPackedInt32Field(value: self.errorCodes, fieldNumber: 8)
    }
    if !self.guid.isEmpty {
      try visitor.visitSingularStringField(value: self.guid, fieldNumber: 9)
    }
    if self.timestampInS != 0 {
      try visitor.visitSingularInt64Field(value: self.timestampInS, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_EventPushCommand, rhs: Proto_EventPushCommand) -> Bool {
    if lhs.vin != rhs.vin {return false}
    if lhs.state != rhs.state {return false}
    if lhs.condition != rhs.condition {return false}
    if lhs.type != rhs.type {return false}
    if lhs.processID != rhs.processID {return false}
    if lhs.trackingID != rhs.trackingID {return false}
    if lhs.correlationID != rhs.correlationID {return false}
    if lhs.errorCodes != rhs.errorCodes {return false}
    if lhs.guid != rhs.guid {return false}
    if lhs.timestampInS != rhs.timestampInS {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
